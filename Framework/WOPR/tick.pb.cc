// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tick.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tick.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Serializable {

namespace {

const ::google::protobuf::Descriptor* Tick_ser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tick_ser_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tick_collection_ser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tick_collection_ser_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tick_2eproto() {
  protobuf_AddDesc_tick_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tick.proto");
  GOOGLE_CHECK(file != NULL);
  Tick_ser_descriptor_ = file->message_type(0);
  static const int Tick_ser_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, istraded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, isquote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, istype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, tradeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, tradevolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, tradeexch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, bidsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, bidexch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, bidtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, ask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, asksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, askexch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, asktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, dailyvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, dailyhigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, dailylow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, dailytrades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, openinterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, expdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, strike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, tickid_),
  };
  Tick_ser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tick_ser_descriptor_,
      Tick_ser::default_instance_,
      Tick_ser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_ser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tick_ser));
  Tick_collection_ser_descriptor_ = file->message_type(1);
  static const int Tick_collection_ser_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_collection_ser, tick_collection_),
  };
  Tick_collection_ser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tick_collection_ser_descriptor_,
      Tick_collection_ser::default_instance_,
      Tick_collection_ser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_collection_ser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tick_collection_ser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tick_collection_ser));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tick_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tick_ser_descriptor_, &Tick_ser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tick_collection_ser_descriptor_, &Tick_collection_ser::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tick_2eproto() {
  delete Tick_ser::default_instance_;
  delete Tick_ser_reflection_;
  delete Tick_collection_ser::default_instance_;
  delete Tick_collection_ser_reflection_;
}

void protobuf_AddDesc_tick_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntick.proto\022\014Serializable\"\347\003\n\010Tick_ser\022"
    "\016\n\006symbol\030\001 \002(\t\022\027\n\010isTraded\030\002 \001(\010:\005false"
    "\022\026\n\007isQuote\030\003 \001(\010:\005false\022\016\n\006isType\030\004 \001(\t"
    "\022\025\n\nTradePrice\030\005 \001(\002:\0010\022\023\n\013TradeVolume\030\006"
    " \001(\005\022\021\n\tTradeExch\030\007 \001(\t\022\016\n\003bid\030\010 \001(\002:\0010\022"
    "\022\n\007BidSize\030\t \001(\005:\0010\022\017\n\007BidExch\030\n \001(\t\022\017\n\007"
    "BidTime\030\013 \001(\t\022\016\n\003ask\030\014 \001(\002:\0010\022\022\n\007AskSize"
    "\030\r \001(\005:\0010\022\022\n\007AskExch\030\016 \001(\002:\0010\022\017\n\007AskTime"
    "\030\017 \001(\t\022\026\n\013DailyVolume\030\020 \001(\005:\0010\022\024\n\tDailyH"
    "igh\030\021 \001(\002:\0010\022\023\n\010DailyLow\030\022 \001(\002:\0010\022\026\n\013Dai"
    "lyTrades\030\023 \001(\005:\0010\022\021\n\tTimeStamp\030\024 \001(\t\022\027\n\014"
    "OpenInterest\030\025 \001(\005:\0010\022\017\n\007ExpDate\030\026 \001(\t\022\021"
    "\n\006Strike\030\027 \001(\002:\0010\022\021\n\006TickID\030\030 \001(\005:\0010\"F\n\023"
    "Tick_collection_ser\022/\n\017tick_collection\030\001"
    " \003(\0132\026.Serializable.Tick_ser", 588);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tick.proto", &protobuf_RegisterTypes);
  Tick_ser::default_instance_ = new Tick_ser();
  Tick_collection_ser::default_instance_ = new Tick_collection_ser();
  Tick_ser::default_instance_->InitAsDefaultInstance();
  Tick_collection_ser::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tick_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tick_2eproto {
  StaticDescriptorInitializer_tick_2eproto() {
    protobuf_AddDesc_tick_2eproto();
  }
} static_descriptor_initializer_tick_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Tick_ser::kSymbolFieldNumber;
const int Tick_ser::kIsTradedFieldNumber;
const int Tick_ser::kIsQuoteFieldNumber;
const int Tick_ser::kIsTypeFieldNumber;
const int Tick_ser::kTradePriceFieldNumber;
const int Tick_ser::kTradeVolumeFieldNumber;
const int Tick_ser::kTradeExchFieldNumber;
const int Tick_ser::kBidFieldNumber;
const int Tick_ser::kBidSizeFieldNumber;
const int Tick_ser::kBidExchFieldNumber;
const int Tick_ser::kBidTimeFieldNumber;
const int Tick_ser::kAskFieldNumber;
const int Tick_ser::kAskSizeFieldNumber;
const int Tick_ser::kAskExchFieldNumber;
const int Tick_ser::kAskTimeFieldNumber;
const int Tick_ser::kDailyVolumeFieldNumber;
const int Tick_ser::kDailyHighFieldNumber;
const int Tick_ser::kDailyLowFieldNumber;
const int Tick_ser::kDailyTradesFieldNumber;
const int Tick_ser::kTimeStampFieldNumber;
const int Tick_ser::kOpenInterestFieldNumber;
const int Tick_ser::kExpDateFieldNumber;
const int Tick_ser::kStrikeFieldNumber;
const int Tick_ser::kTickIDFieldNumber;
#endif  // !_MSC_VER

Tick_ser::Tick_ser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tick_ser::InitAsDefaultInstance() {
}

Tick_ser::Tick_ser(const Tick_ser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tick_ser::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  istraded_ = false;
  isquote_ = false;
  istype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tradeprice_ = 0;
  tradevolume_ = 0;
  tradeexch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bid_ = 0;
  bidsize_ = 0;
  bidexch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bidtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ask_ = 0;
  asksize_ = 0;
  askexch_ = 0;
  asktime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dailyvolume_ = 0;
  dailyhigh_ = 0;
  dailylow_ = 0;
  dailytrades_ = 0;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openinterest_ = 0;
  expdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strike_ = 0;
  tickid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tick_ser::~Tick_ser() {
  SharedDtor();
}

void Tick_ser::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (istype_ != &::google::protobuf::internal::kEmptyString) {
    delete istype_;
  }
  if (tradeexch_ != &::google::protobuf::internal::kEmptyString) {
    delete tradeexch_;
  }
  if (bidexch_ != &::google::protobuf::internal::kEmptyString) {
    delete bidexch_;
  }
  if (bidtime_ != &::google::protobuf::internal::kEmptyString) {
    delete bidtime_;
  }
  if (asktime_ != &::google::protobuf::internal::kEmptyString) {
    delete asktime_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (expdate_ != &::google::protobuf::internal::kEmptyString) {
    delete expdate_;
  }
  if (this != default_instance_) {
  }
}

void Tick_ser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tick_ser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tick_ser_descriptor_;
}

const Tick_ser& Tick_ser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tick_2eproto();
  return *default_instance_;
}

Tick_ser* Tick_ser::default_instance_ = NULL;

Tick_ser* Tick_ser::New() const {
  return new Tick_ser;
}

void Tick_ser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    istraded_ = false;
    isquote_ = false;
    if (has_istype()) {
      if (istype_ != &::google::protobuf::internal::kEmptyString) {
        istype_->clear();
      }
    }
    tradeprice_ = 0;
    tradevolume_ = 0;
    if (has_tradeexch()) {
      if (tradeexch_ != &::google::protobuf::internal::kEmptyString) {
        tradeexch_->clear();
      }
    }
    bid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bidsize_ = 0;
    if (has_bidexch()) {
      if (bidexch_ != &::google::protobuf::internal::kEmptyString) {
        bidexch_->clear();
      }
    }
    if (has_bidtime()) {
      if (bidtime_ != &::google::protobuf::internal::kEmptyString) {
        bidtime_->clear();
      }
    }
    ask_ = 0;
    asksize_ = 0;
    askexch_ = 0;
    if (has_asktime()) {
      if (asktime_ != &::google::protobuf::internal::kEmptyString) {
        asktime_->clear();
      }
    }
    dailyvolume_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    dailyhigh_ = 0;
    dailylow_ = 0;
    dailytrades_ = 0;
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    openinterest_ = 0;
    if (has_expdate()) {
      if (expdate_ != &::google::protobuf::internal::kEmptyString) {
        expdate_->clear();
      }
    }
    strike_ = 0;
    tickid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tick_ser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isTraded;
        break;
      }

      // optional bool isTraded = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTraded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istraded_)));
          set_has_istraded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isQuote;
        break;
      }

      // optional bool isQuote = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isQuote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isquote_)));
          set_has_isquote();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_isType;
        break;
      }

      // optional string isType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_istype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->istype().data(), this->istype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_TradePrice;
        break;
      }

      // optional float TradePrice = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_TradePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tradeprice_)));
          set_has_tradeprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TradeVolume;
        break;
      }

      // optional int32 TradeVolume = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TradeVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradevolume_)));
          set_has_tradevolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_TradeExch;
        break;
      }

      // optional string TradeExch = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TradeExch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeexch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradeexch().data(), this->tradeexch().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_bid;
        break;
      }

      // optional float bid = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_BidSize;
        break;
      }

      // optional int32 BidSize = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BidSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidsize_)));
          set_has_bidsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_BidExch;
        break;
      }

      // optional string BidExch = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BidExch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bidexch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bidexch().data(), this->bidexch().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_BidTime;
        break;
      }

      // optional string BidTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BidTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bidtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bidtime().data(), this->bidtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_ask;
        break;
      }

      // optional float ask = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ask_)));
          set_has_ask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_AskSize;
        break;
      }

      // optional int32 AskSize = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AskSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asksize_)));
          set_has_asksize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_AskExch;
        break;
      }

      // optional float AskExch = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AskExch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &askexch_)));
          set_has_askexch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_AskTime;
        break;
      }

      // optional string AskTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AskTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asktime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->asktime().data(), this->asktime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_DailyVolume;
        break;
      }

      // optional int32 DailyVolume = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DailyVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dailyvolume_)));
          set_has_dailyvolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_DailyHigh;
        break;
      }

      // optional float DailyHigh = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_DailyHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dailyhigh_)));
          set_has_dailyhigh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_DailyLow;
        break;
      }

      // optional float DailyLow = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_DailyLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dailylow_)));
          set_has_dailylow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_DailyTrades;
        break;
      }

      // optional int32 DailyTrades = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DailyTrades:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dailytrades_)));
          set_has_dailytrades();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_TimeStamp;
        break;
      }

      // optional string TimeStamp = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TimeStamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_OpenInterest;
        break;
      }

      // optional int32 OpenInterest = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpenInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openinterest_)));
          set_has_openinterest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_ExpDate;
        break;
      }

      // optional string ExpDate = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExpDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->expdate().data(), this->expdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_Strike;
        break;
      }

      // optional float Strike = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Strike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &strike_)));
          set_has_strike();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_TickID;
        break;
      }

      // optional int32 TickID = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TickID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tickid_)));
          set_has_tickid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tick_ser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }

  // optional bool isTraded = 2 [default = false];
  if (has_istraded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->istraded(), output);
  }

  // optional bool isQuote = 3 [default = false];
  if (has_isquote()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isquote(), output);
  }

  // optional string isType = 4;
  if (has_istype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->istype().data(), this->istype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->istype(), output);
  }

  // optional float TradePrice = 5 [default = 0];
  if (has_tradeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->tradeprice(), output);
  }

  // optional int32 TradeVolume = 6;
  if (has_tradevolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tradevolume(), output);
  }

  // optional string TradeExch = 7;
  if (has_tradeexch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradeexch().data(), this->tradeexch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->tradeexch(), output);
  }

  // optional float bid = 8 [default = 0];
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->bid(), output);
  }

  // optional int32 BidSize = 9 [default = 0];
  if (has_bidsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bidsize(), output);
  }

  // optional string BidExch = 10;
  if (has_bidexch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bidexch().data(), this->bidexch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->bidexch(), output);
  }

  // optional string BidTime = 11;
  if (has_bidtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bidtime().data(), this->bidtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->bidtime(), output);
  }

  // optional float ask = 12 [default = 0];
  if (has_ask()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->ask(), output);
  }

  // optional int32 AskSize = 13 [default = 0];
  if (has_asksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->asksize(), output);
  }

  // optional float AskExch = 14 [default = 0];
  if (has_askexch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->askexch(), output);
  }

  // optional string AskTime = 15;
  if (has_asktime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->asktime().data(), this->asktime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->asktime(), output);
  }

  // optional int32 DailyVolume = 16 [default = 0];
  if (has_dailyvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->dailyvolume(), output);
  }

  // optional float DailyHigh = 17 [default = 0];
  if (has_dailyhigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->dailyhigh(), output);
  }

  // optional float DailyLow = 18 [default = 0];
  if (has_dailylow()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->dailylow(), output);
  }

  // optional int32 DailyTrades = 19 [default = 0];
  if (has_dailytrades()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->dailytrades(), output);
  }

  // optional string TimeStamp = 20;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->timestamp(), output);
  }

  // optional int32 OpenInterest = 21 [default = 0];
  if (has_openinterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->openinterest(), output);
  }

  // optional string ExpDate = 22;
  if (has_expdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->expdate().data(), this->expdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->expdate(), output);
  }

  // optional float Strike = 23 [default = 0];
  if (has_strike()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->strike(), output);
  }

  // optional int32 TickID = 24 [default = 0];
  if (has_tickid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->tickid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tick_ser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional bool isTraded = 2 [default = false];
  if (has_istraded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->istraded(), target);
  }

  // optional bool isQuote = 3 [default = false];
  if (has_isquote()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isquote(), target);
  }

  // optional string isType = 4;
  if (has_istype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->istype().data(), this->istype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->istype(), target);
  }

  // optional float TradePrice = 5 [default = 0];
  if (has_tradeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->tradeprice(), target);
  }

  // optional int32 TradeVolume = 6;
  if (has_tradevolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tradevolume(), target);
  }

  // optional string TradeExch = 7;
  if (has_tradeexch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradeexch().data(), this->tradeexch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tradeexch(), target);
  }

  // optional float bid = 8 [default = 0];
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->bid(), target);
  }

  // optional int32 BidSize = 9 [default = 0];
  if (has_bidsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bidsize(), target);
  }

  // optional string BidExch = 10;
  if (has_bidexch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bidexch().data(), this->bidexch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->bidexch(), target);
  }

  // optional string BidTime = 11;
  if (has_bidtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bidtime().data(), this->bidtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->bidtime(), target);
  }

  // optional float ask = 12 [default = 0];
  if (has_ask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->ask(), target);
  }

  // optional int32 AskSize = 13 [default = 0];
  if (has_asksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->asksize(), target);
  }

  // optional float AskExch = 14 [default = 0];
  if (has_askexch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->askexch(), target);
  }

  // optional string AskTime = 15;
  if (has_asktime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->asktime().data(), this->asktime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->asktime(), target);
  }

  // optional int32 DailyVolume = 16 [default = 0];
  if (has_dailyvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->dailyvolume(), target);
  }

  // optional float DailyHigh = 17 [default = 0];
  if (has_dailyhigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->dailyhigh(), target);
  }

  // optional float DailyLow = 18 [default = 0];
  if (has_dailylow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->dailylow(), target);
  }

  // optional int32 DailyTrades = 19 [default = 0];
  if (has_dailytrades()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->dailytrades(), target);
  }

  // optional string TimeStamp = 20;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->timestamp(), target);
  }

  // optional int32 OpenInterest = 21 [default = 0];
  if (has_openinterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->openinterest(), target);
  }

  // optional string ExpDate = 22;
  if (has_expdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->expdate().data(), this->expdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->expdate(), target);
  }

  // optional float Strike = 23 [default = 0];
  if (has_strike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->strike(), target);
  }

  // optional int32 TickID = 24 [default = 0];
  if (has_tickid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->tickid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tick_ser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional bool isTraded = 2 [default = false];
    if (has_istraded()) {
      total_size += 1 + 1;
    }

    // optional bool isQuote = 3 [default = false];
    if (has_isquote()) {
      total_size += 1 + 1;
    }

    // optional string isType = 4;
    if (has_istype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->istype());
    }

    // optional float TradePrice = 5 [default = 0];
    if (has_tradeprice()) {
      total_size += 1 + 4;
    }

    // optional int32 TradeVolume = 6;
    if (has_tradevolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tradevolume());
    }

    // optional string TradeExch = 7;
    if (has_tradeexch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeexch());
    }

    // optional float bid = 8 [default = 0];
    if (has_bid()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 BidSize = 9 [default = 0];
    if (has_bidsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidsize());
    }

    // optional string BidExch = 10;
    if (has_bidexch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bidexch());
    }

    // optional string BidTime = 11;
    if (has_bidtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bidtime());
    }

    // optional float ask = 12 [default = 0];
    if (has_ask()) {
      total_size += 1 + 4;
    }

    // optional int32 AskSize = 13 [default = 0];
    if (has_asksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->asksize());
    }

    // optional float AskExch = 14 [default = 0];
    if (has_askexch()) {
      total_size += 1 + 4;
    }

    // optional string AskTime = 15;
    if (has_asktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->asktime());
    }

    // optional int32 DailyVolume = 16 [default = 0];
    if (has_dailyvolume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dailyvolume());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float DailyHigh = 17 [default = 0];
    if (has_dailyhigh()) {
      total_size += 2 + 4;
    }

    // optional float DailyLow = 18 [default = 0];
    if (has_dailylow()) {
      total_size += 2 + 4;
    }

    // optional int32 DailyTrades = 19 [default = 0];
    if (has_dailytrades()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dailytrades());
    }

    // optional string TimeStamp = 20;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional int32 OpenInterest = 21 [default = 0];
    if (has_openinterest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->openinterest());
    }

    // optional string ExpDate = 22;
    if (has_expdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->expdate());
    }

    // optional float Strike = 23 [default = 0];
    if (has_strike()) {
      total_size += 2 + 4;
    }

    // optional int32 TickID = 24 [default = 0];
    if (has_tickid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tickid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tick_ser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tick_ser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tick_ser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tick_ser::MergeFrom(const Tick_ser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_istraded()) {
      set_istraded(from.istraded());
    }
    if (from.has_isquote()) {
      set_isquote(from.isquote());
    }
    if (from.has_istype()) {
      set_istype(from.istype());
    }
    if (from.has_tradeprice()) {
      set_tradeprice(from.tradeprice());
    }
    if (from.has_tradevolume()) {
      set_tradevolume(from.tradevolume());
    }
    if (from.has_tradeexch()) {
      set_tradeexch(from.tradeexch());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bidsize()) {
      set_bidsize(from.bidsize());
    }
    if (from.has_bidexch()) {
      set_bidexch(from.bidexch());
    }
    if (from.has_bidtime()) {
      set_bidtime(from.bidtime());
    }
    if (from.has_ask()) {
      set_ask(from.ask());
    }
    if (from.has_asksize()) {
      set_asksize(from.asksize());
    }
    if (from.has_askexch()) {
      set_askexch(from.askexch());
    }
    if (from.has_asktime()) {
      set_asktime(from.asktime());
    }
    if (from.has_dailyvolume()) {
      set_dailyvolume(from.dailyvolume());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_dailyhigh()) {
      set_dailyhigh(from.dailyhigh());
    }
    if (from.has_dailylow()) {
      set_dailylow(from.dailylow());
    }
    if (from.has_dailytrades()) {
      set_dailytrades(from.dailytrades());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_openinterest()) {
      set_openinterest(from.openinterest());
    }
    if (from.has_expdate()) {
      set_expdate(from.expdate());
    }
    if (from.has_strike()) {
      set_strike(from.strike());
    }
    if (from.has_tickid()) {
      set_tickid(from.tickid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tick_ser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tick_ser::CopyFrom(const Tick_ser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tick_ser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Tick_ser::Swap(Tick_ser* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(istraded_, other->istraded_);
    std::swap(isquote_, other->isquote_);
    std::swap(istype_, other->istype_);
    std::swap(tradeprice_, other->tradeprice_);
    std::swap(tradevolume_, other->tradevolume_);
    std::swap(tradeexch_, other->tradeexch_);
    std::swap(bid_, other->bid_);
    std::swap(bidsize_, other->bidsize_);
    std::swap(bidexch_, other->bidexch_);
    std::swap(bidtime_, other->bidtime_);
    std::swap(ask_, other->ask_);
    std::swap(asksize_, other->asksize_);
    std::swap(askexch_, other->askexch_);
    std::swap(asktime_, other->asktime_);
    std::swap(dailyvolume_, other->dailyvolume_);
    std::swap(dailyhigh_, other->dailyhigh_);
    std::swap(dailylow_, other->dailylow_);
    std::swap(dailytrades_, other->dailytrades_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(openinterest_, other->openinterest_);
    std::swap(expdate_, other->expdate_);
    std::swap(strike_, other->strike_);
    std::swap(tickid_, other->tickid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tick_ser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tick_ser_descriptor_;
  metadata.reflection = Tick_ser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tick_collection_ser::kTickCollectionFieldNumber;
#endif  // !_MSC_VER

Tick_collection_ser::Tick_collection_ser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tick_collection_ser::InitAsDefaultInstance() {
}

Tick_collection_ser::Tick_collection_ser(const Tick_collection_ser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tick_collection_ser::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tick_collection_ser::~Tick_collection_ser() {
  SharedDtor();
}

void Tick_collection_ser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tick_collection_ser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tick_collection_ser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tick_collection_ser_descriptor_;
}

const Tick_collection_ser& Tick_collection_ser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tick_2eproto();
  return *default_instance_;
}

Tick_collection_ser* Tick_collection_ser::default_instance_ = NULL;

Tick_collection_ser* Tick_collection_ser::New() const {
  return new Tick_collection_ser;
}

void Tick_collection_ser::Clear() {
  tick_collection_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tick_collection_ser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Serializable.Tick_ser tick_collection = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tick_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tick_collection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tick_collection;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tick_collection_ser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Serializable.Tick_ser tick_collection = 1;
  for (int i = 0; i < this->tick_collection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tick_collection(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tick_collection_ser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Serializable.Tick_ser tick_collection = 1;
  for (int i = 0; i < this->tick_collection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tick_collection(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tick_collection_ser::ByteSize() const {
  int total_size = 0;

  // repeated .Serializable.Tick_ser tick_collection = 1;
  total_size += 1 * this->tick_collection_size();
  for (int i = 0; i < this->tick_collection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tick_collection(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tick_collection_ser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tick_collection_ser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tick_collection_ser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tick_collection_ser::MergeFrom(const Tick_collection_ser& from) {
  GOOGLE_CHECK_NE(&from, this);
  tick_collection_.MergeFrom(from.tick_collection_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tick_collection_ser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tick_collection_ser::CopyFrom(const Tick_collection_ser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tick_collection_ser::IsInitialized() const {

  for (int i = 0; i < tick_collection_size(); i++) {
    if (!this->tick_collection(i).IsInitialized()) return false;
  }
  return true;
}

void Tick_collection_ser::Swap(Tick_collection_ser* other) {
  if (other != this) {
    tick_collection_.Swap(&other->tick_collection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tick_collection_ser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tick_collection_ser_descriptor_;
  metadata.reflection = Tick_collection_ser_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serializable

// @@protoc_insertion_point(global_scope)
