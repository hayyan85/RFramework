// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tick.proto

#ifndef PROTOBUF_tick_2eproto__INCLUDED
#define PROTOBUF_tick_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Serializable {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tick_2eproto();
void protobuf_AssignDesc_tick_2eproto();
void protobuf_ShutdownFile_tick_2eproto();

class Tick_ser;
class Tick_collection_ser;

// ===================================================================

class Tick_ser : public ::google::protobuf::Message {
 public:
  Tick_ser();
  virtual ~Tick_ser();

  Tick_ser(const Tick_ser& from);

  inline Tick_ser& operator=(const Tick_ser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tick_ser& default_instance();

  void Swap(Tick_ser* other);

  // implements Message ----------------------------------------------

  Tick_ser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tick_ser& from);
  void MergeFrom(const Tick_ser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string symbol = 1;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // optional bool isTraded = 2 [default = false];
  inline bool has_istraded() const;
  inline void clear_istraded();
  static const int kIsTradedFieldNumber = 2;
  inline bool istraded() const;
  inline void set_istraded(bool value);

  // optional bool isQuote = 3 [default = false];
  inline bool has_isquote() const;
  inline void clear_isquote();
  static const int kIsQuoteFieldNumber = 3;
  inline bool isquote() const;
  inline void set_isquote(bool value);

  // optional string isType = 4;
  inline bool has_istype() const;
  inline void clear_istype();
  static const int kIsTypeFieldNumber = 4;
  inline const ::std::string& istype() const;
  inline void set_istype(const ::std::string& value);
  inline void set_istype(const char* value);
  inline void set_istype(const char* value, size_t size);
  inline ::std::string* mutable_istype();
  inline ::std::string* release_istype();
  inline void set_allocated_istype(::std::string* istype);

  // optional float TradePrice = 5 [default = 0];
  inline bool has_tradeprice() const;
  inline void clear_tradeprice();
  static const int kTradePriceFieldNumber = 5;
  inline float tradeprice() const;
  inline void set_tradeprice(float value);

  // optional int32 TradeVolume = 6;
  inline bool has_tradevolume() const;
  inline void clear_tradevolume();
  static const int kTradeVolumeFieldNumber = 6;
  inline ::google::protobuf::int32 tradevolume() const;
  inline void set_tradevolume(::google::protobuf::int32 value);

  // optional string TradeExch = 7;
  inline bool has_tradeexch() const;
  inline void clear_tradeexch();
  static const int kTradeExchFieldNumber = 7;
  inline const ::std::string& tradeexch() const;
  inline void set_tradeexch(const ::std::string& value);
  inline void set_tradeexch(const char* value);
  inline void set_tradeexch(const char* value, size_t size);
  inline ::std::string* mutable_tradeexch();
  inline ::std::string* release_tradeexch();
  inline void set_allocated_tradeexch(::std::string* tradeexch);

  // optional float bid = 8 [default = 0];
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 8;
  inline float bid() const;
  inline void set_bid(float value);

  // optional int32 BidSize = 9 [default = 0];
  inline bool has_bidsize() const;
  inline void clear_bidsize();
  static const int kBidSizeFieldNumber = 9;
  inline ::google::protobuf::int32 bidsize() const;
  inline void set_bidsize(::google::protobuf::int32 value);

  // optional string BidExch = 10;
  inline bool has_bidexch() const;
  inline void clear_bidexch();
  static const int kBidExchFieldNumber = 10;
  inline const ::std::string& bidexch() const;
  inline void set_bidexch(const ::std::string& value);
  inline void set_bidexch(const char* value);
  inline void set_bidexch(const char* value, size_t size);
  inline ::std::string* mutable_bidexch();
  inline ::std::string* release_bidexch();
  inline void set_allocated_bidexch(::std::string* bidexch);

  // optional string BidTime = 11;
  inline bool has_bidtime() const;
  inline void clear_bidtime();
  static const int kBidTimeFieldNumber = 11;
  inline const ::std::string& bidtime() const;
  inline void set_bidtime(const ::std::string& value);
  inline void set_bidtime(const char* value);
  inline void set_bidtime(const char* value, size_t size);
  inline ::std::string* mutable_bidtime();
  inline ::std::string* release_bidtime();
  inline void set_allocated_bidtime(::std::string* bidtime);

  // optional float ask = 12 [default = 0];
  inline bool has_ask() const;
  inline void clear_ask();
  static const int kAskFieldNumber = 12;
  inline float ask() const;
  inline void set_ask(float value);

  // optional int32 AskSize = 13 [default = 0];
  inline bool has_asksize() const;
  inline void clear_asksize();
  static const int kAskSizeFieldNumber = 13;
  inline ::google::protobuf::int32 asksize() const;
  inline void set_asksize(::google::protobuf::int32 value);

  // optional float AskExch = 14 [default = 0];
  inline bool has_askexch() const;
  inline void clear_askexch();
  static const int kAskExchFieldNumber = 14;
  inline float askexch() const;
  inline void set_askexch(float value);

  // optional string AskTime = 15;
  inline bool has_asktime() const;
  inline void clear_asktime();
  static const int kAskTimeFieldNumber = 15;
  inline const ::std::string& asktime() const;
  inline void set_asktime(const ::std::string& value);
  inline void set_asktime(const char* value);
  inline void set_asktime(const char* value, size_t size);
  inline ::std::string* mutable_asktime();
  inline ::std::string* release_asktime();
  inline void set_allocated_asktime(::std::string* asktime);

  // optional int32 DailyVolume = 16 [default = 0];
  inline bool has_dailyvolume() const;
  inline void clear_dailyvolume();
  static const int kDailyVolumeFieldNumber = 16;
  inline ::google::protobuf::int32 dailyvolume() const;
  inline void set_dailyvolume(::google::protobuf::int32 value);

  // optional float DailyHigh = 17 [default = 0];
  inline bool has_dailyhigh() const;
  inline void clear_dailyhigh();
  static const int kDailyHighFieldNumber = 17;
  inline float dailyhigh() const;
  inline void set_dailyhigh(float value);

  // optional float DailyLow = 18 [default = 0];
  inline bool has_dailylow() const;
  inline void clear_dailylow();
  static const int kDailyLowFieldNumber = 18;
  inline float dailylow() const;
  inline void set_dailylow(float value);

  // optional int32 DailyTrades = 19 [default = 0];
  inline bool has_dailytrades() const;
  inline void clear_dailytrades();
  static const int kDailyTradesFieldNumber = 19;
  inline ::google::protobuf::int32 dailytrades() const;
  inline void set_dailytrades(::google::protobuf::int32 value);

  // optional string TimeStamp = 20;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimeStampFieldNumber = 20;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  inline void set_allocated_timestamp(::std::string* timestamp);

  // optional int32 OpenInterest = 21 [default = 0];
  inline bool has_openinterest() const;
  inline void clear_openinterest();
  static const int kOpenInterestFieldNumber = 21;
  inline ::google::protobuf::int32 openinterest() const;
  inline void set_openinterest(::google::protobuf::int32 value);

  // optional string ExpDate = 22;
  inline bool has_expdate() const;
  inline void clear_expdate();
  static const int kExpDateFieldNumber = 22;
  inline const ::std::string& expdate() const;
  inline void set_expdate(const ::std::string& value);
  inline void set_expdate(const char* value);
  inline void set_expdate(const char* value, size_t size);
  inline ::std::string* mutable_expdate();
  inline ::std::string* release_expdate();
  inline void set_allocated_expdate(::std::string* expdate);

  // optional float Strike = 23 [default = 0];
  inline bool has_strike() const;
  inline void clear_strike();
  static const int kStrikeFieldNumber = 23;
  inline float strike() const;
  inline void set_strike(float value);

  // optional int32 TickID = 24 [default = 0];
  inline bool has_tickid() const;
  inline void clear_tickid();
  static const int kTickIDFieldNumber = 24;
  inline ::google::protobuf::int32 tickid() const;
  inline void set_tickid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Serializable.Tick_ser)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_istraded();
  inline void clear_has_istraded();
  inline void set_has_isquote();
  inline void clear_has_isquote();
  inline void set_has_istype();
  inline void clear_has_istype();
  inline void set_has_tradeprice();
  inline void clear_has_tradeprice();
  inline void set_has_tradevolume();
  inline void clear_has_tradevolume();
  inline void set_has_tradeexch();
  inline void clear_has_tradeexch();
  inline void set_has_bid();
  inline void clear_has_bid();
  inline void set_has_bidsize();
  inline void clear_has_bidsize();
  inline void set_has_bidexch();
  inline void clear_has_bidexch();
  inline void set_has_bidtime();
  inline void clear_has_bidtime();
  inline void set_has_ask();
  inline void clear_has_ask();
  inline void set_has_asksize();
  inline void clear_has_asksize();
  inline void set_has_askexch();
  inline void clear_has_askexch();
  inline void set_has_asktime();
  inline void clear_has_asktime();
  inline void set_has_dailyvolume();
  inline void clear_has_dailyvolume();
  inline void set_has_dailyhigh();
  inline void clear_has_dailyhigh();
  inline void set_has_dailylow();
  inline void clear_has_dailylow();
  inline void set_has_dailytrades();
  inline void clear_has_dailytrades();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_openinterest();
  inline void clear_has_openinterest();
  inline void set_has_expdate();
  inline void clear_has_expdate();
  inline void set_has_strike();
  inline void clear_has_strike();
  inline void set_has_tickid();
  inline void clear_has_tickid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* symbol_;
  bool istraded_;
  bool isquote_;
  float tradeprice_;
  ::std::string* istype_;
  ::std::string* tradeexch_;
  ::google::protobuf::int32 tradevolume_;
  float bid_;
  ::std::string* bidexch_;
  ::google::protobuf::int32 bidsize_;
  float ask_;
  ::std::string* bidtime_;
  ::google::protobuf::int32 asksize_;
  float askexch_;
  ::std::string* asktime_;
  ::google::protobuf::int32 dailyvolume_;
  float dailyhigh_;
  float dailylow_;
  ::google::protobuf::int32 dailytrades_;
  ::std::string* timestamp_;
  ::std::string* expdate_;
  ::google::protobuf::int32 openinterest_;
  float strike_;
  ::google::protobuf::int32 tickid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  friend void  protobuf_AddDesc_tick_2eproto();
  friend void protobuf_AssignDesc_tick_2eproto();
  friend void protobuf_ShutdownFile_tick_2eproto();

  void InitAsDefaultInstance();
  static Tick_ser* default_instance_;
};
// -------------------------------------------------------------------

class Tick_collection_ser : public ::google::protobuf::Message {
 public:
  Tick_collection_ser();
  virtual ~Tick_collection_ser();

  Tick_collection_ser(const Tick_collection_ser& from);

  inline Tick_collection_ser& operator=(const Tick_collection_ser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tick_collection_ser& default_instance();

  void Swap(Tick_collection_ser* other);

  // implements Message ----------------------------------------------

  Tick_collection_ser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tick_collection_ser& from);
  void MergeFrom(const Tick_collection_ser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Serializable.Tick_ser tick_collection = 1;
  inline int tick_collection_size() const;
  inline void clear_tick_collection();
  static const int kTickCollectionFieldNumber = 1;
  inline const ::Serializable::Tick_ser& tick_collection(int index) const;
  inline ::Serializable::Tick_ser* mutable_tick_collection(int index);
  inline ::Serializable::Tick_ser* add_tick_collection();
  inline const ::google::protobuf::RepeatedPtrField< ::Serializable::Tick_ser >&
      tick_collection() const;
  inline ::google::protobuf::RepeatedPtrField< ::Serializable::Tick_ser >*
      mutable_tick_collection();

  // @@protoc_insertion_point(class_scope:Serializable.Tick_collection_ser)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Serializable::Tick_ser > tick_collection_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_tick_2eproto();
  friend void protobuf_AssignDesc_tick_2eproto();
  friend void protobuf_ShutdownFile_tick_2eproto();

  void InitAsDefaultInstance();
  static Tick_collection_ser* default_instance_;
};
// ===================================================================


// ===================================================================

// Tick_ser

// required string symbol = 1;
inline bool Tick_ser::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tick_ser::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tick_ser::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tick_ser::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& Tick_ser::symbol() const {
  return *symbol_;
}
inline void Tick_ser::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void Tick_ser::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void Tick_ser::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tick_ser::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* Tick_ser::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Tick_ser::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool isTraded = 2 [default = false];
inline bool Tick_ser::has_istraded() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tick_ser::set_has_istraded() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tick_ser::clear_has_istraded() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tick_ser::clear_istraded() {
  istraded_ = false;
  clear_has_istraded();
}
inline bool Tick_ser::istraded() const {
  return istraded_;
}
inline void Tick_ser::set_istraded(bool value) {
  set_has_istraded();
  istraded_ = value;
}

// optional bool isQuote = 3 [default = false];
inline bool Tick_ser::has_isquote() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Tick_ser::set_has_isquote() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Tick_ser::clear_has_isquote() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Tick_ser::clear_isquote() {
  isquote_ = false;
  clear_has_isquote();
}
inline bool Tick_ser::isquote() const {
  return isquote_;
}
inline void Tick_ser::set_isquote(bool value) {
  set_has_isquote();
  isquote_ = value;
}

// optional string isType = 4;
inline bool Tick_ser::has_istype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Tick_ser::set_has_istype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Tick_ser::clear_has_istype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Tick_ser::clear_istype() {
  if (istype_ != &::google::protobuf::internal::kEmptyString) {
    istype_->clear();
  }
  clear_has_istype();
}
inline const ::std::string& Tick_ser::istype() const {
  return *istype_;
}
inline void Tick_ser::set_istype(const ::std::string& value) {
  set_has_istype();
  if (istype_ == &::google::protobuf::internal::kEmptyString) {
    istype_ = new ::std::string;
  }
  istype_->assign(value);
}
inline void Tick_ser::set_istype(const char* value) {
  set_has_istype();
  if (istype_ == &::google::protobuf::internal::kEmptyString) {
    istype_ = new ::std::string;
  }
  istype_->assign(value);
}
inline void Tick_ser::set_istype(const char* value, size_t size) {
  set_has_istype();
  if (istype_ == &::google::protobuf::internal::kEmptyString) {
    istype_ = new ::std::string;
  }
  istype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tick_ser::mutable_istype() {
  set_has_istype();
  if (istype_ == &::google::protobuf::internal::kEmptyString) {
    istype_ = new ::std::string;
  }
  return istype_;
}
inline ::std::string* Tick_ser::release_istype() {
  clear_has_istype();
  if (istype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = istype_;
    istype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Tick_ser::set_allocated_istype(::std::string* istype) {
  if (istype_ != &::google::protobuf::internal::kEmptyString) {
    delete istype_;
  }
  if (istype) {
    set_has_istype();
    istype_ = istype;
  } else {
    clear_has_istype();
    istype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float TradePrice = 5 [default = 0];
inline bool Tick_ser::has_tradeprice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Tick_ser::set_has_tradeprice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Tick_ser::clear_has_tradeprice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Tick_ser::clear_tradeprice() {
  tradeprice_ = 0;
  clear_has_tradeprice();
}
inline float Tick_ser::tradeprice() const {
  return tradeprice_;
}
inline void Tick_ser::set_tradeprice(float value) {
  set_has_tradeprice();
  tradeprice_ = value;
}

// optional int32 TradeVolume = 6;
inline bool Tick_ser::has_tradevolume() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Tick_ser::set_has_tradevolume() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Tick_ser::clear_has_tradevolume() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Tick_ser::clear_tradevolume() {
  tradevolume_ = 0;
  clear_has_tradevolume();
}
inline ::google::protobuf::int32 Tick_ser::tradevolume() const {
  return tradevolume_;
}
inline void Tick_ser::set_tradevolume(::google::protobuf::int32 value) {
  set_has_tradevolume();
  tradevolume_ = value;
}

// optional string TradeExch = 7;
inline bool Tick_ser::has_tradeexch() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Tick_ser::set_has_tradeexch() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Tick_ser::clear_has_tradeexch() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Tick_ser::clear_tradeexch() {
  if (tradeexch_ != &::google::protobuf::internal::kEmptyString) {
    tradeexch_->clear();
  }
  clear_has_tradeexch();
}
inline const ::std::string& Tick_ser::tradeexch() const {
  return *tradeexch_;
}
inline void Tick_ser::set_tradeexch(const ::std::string& value) {
  set_has_tradeexch();
  if (tradeexch_ == &::google::protobuf::internal::kEmptyString) {
    tradeexch_ = new ::std::string;
  }
  tradeexch_->assign(value);
}
inline void Tick_ser::set_tradeexch(const char* value) {
  set_has_tradeexch();
  if (tradeexch_ == &::google::protobuf::internal::kEmptyString) {
    tradeexch_ = new ::std::string;
  }
  tradeexch_->assign(value);
}
inline void Tick_ser::set_tradeexch(const char* value, size_t size) {
  set_has_tradeexch();
  if (tradeexch_ == &::google::protobuf::internal::kEmptyString) {
    tradeexch_ = new ::std::string;
  }
  tradeexch_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tick_ser::mutable_tradeexch() {
  set_has_tradeexch();
  if (tradeexch_ == &::google::protobuf::internal::kEmptyString) {
    tradeexch_ = new ::std::string;
  }
  return tradeexch_;
}
inline ::std::string* Tick_ser::release_tradeexch() {
  clear_has_tradeexch();
  if (tradeexch_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tradeexch_;
    tradeexch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Tick_ser::set_allocated_tradeexch(::std::string* tradeexch) {
  if (tradeexch_ != &::google::protobuf::internal::kEmptyString) {
    delete tradeexch_;
  }
  if (tradeexch) {
    set_has_tradeexch();
    tradeexch_ = tradeexch;
  } else {
    clear_has_tradeexch();
    tradeexch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float bid = 8 [default = 0];
inline bool Tick_ser::has_bid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Tick_ser::set_has_bid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Tick_ser::clear_has_bid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Tick_ser::clear_bid() {
  bid_ = 0;
  clear_has_bid();
}
inline float Tick_ser::bid() const {
  return bid_;
}
inline void Tick_ser::set_bid(float value) {
  set_has_bid();
  bid_ = value;
}

// optional int32 BidSize = 9 [default = 0];
inline bool Tick_ser::has_bidsize() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Tick_ser::set_has_bidsize() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Tick_ser::clear_has_bidsize() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Tick_ser::clear_bidsize() {
  bidsize_ = 0;
  clear_has_bidsize();
}
inline ::google::protobuf::int32 Tick_ser::bidsize() const {
  return bidsize_;
}
inline void Tick_ser::set_bidsize(::google::protobuf::int32 value) {
  set_has_bidsize();
  bidsize_ = value;
}

// optional string BidExch = 10;
inline bool Tick_ser::has_bidexch() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Tick_ser::set_has_bidexch() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Tick_ser::clear_has_bidexch() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Tick_ser::clear_bidexch() {
  if (bidexch_ != &::google::protobuf::internal::kEmptyString) {
    bidexch_->clear();
  }
  clear_has_bidexch();
}
inline const ::std::string& Tick_ser::bidexch() const {
  return *bidexch_;
}
inline void Tick_ser::set_bidexch(const ::std::string& value) {
  set_has_bidexch();
  if (bidexch_ == &::google::protobuf::internal::kEmptyString) {
    bidexch_ = new ::std::string;
  }
  bidexch_->assign(value);
}
inline void Tick_ser::set_bidexch(const char* value) {
  set_has_bidexch();
  if (bidexch_ == &::google::protobuf::internal::kEmptyString) {
    bidexch_ = new ::std::string;
  }
  bidexch_->assign(value);
}
inline void Tick_ser::set_bidexch(const char* value, size_t size) {
  set_has_bidexch();
  if (bidexch_ == &::google::protobuf::internal::kEmptyString) {
    bidexch_ = new ::std::string;
  }
  bidexch_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tick_ser::mutable_bidexch() {
  set_has_bidexch();
  if (bidexch_ == &::google::protobuf::internal::kEmptyString) {
    bidexch_ = new ::std::string;
  }
  return bidexch_;
}
inline ::std::string* Tick_ser::release_bidexch() {
  clear_has_bidexch();
  if (bidexch_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bidexch_;
    bidexch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Tick_ser::set_allocated_bidexch(::std::string* bidexch) {
  if (bidexch_ != &::google::protobuf::internal::kEmptyString) {
    delete bidexch_;
  }
  if (bidexch) {
    set_has_bidexch();
    bidexch_ = bidexch;
  } else {
    clear_has_bidexch();
    bidexch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string BidTime = 11;
inline bool Tick_ser::has_bidtime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Tick_ser::set_has_bidtime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Tick_ser::clear_has_bidtime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Tick_ser::clear_bidtime() {
  if (bidtime_ != &::google::protobuf::internal::kEmptyString) {
    bidtime_->clear();
  }
  clear_has_bidtime();
}
inline const ::std::string& Tick_ser::bidtime() const {
  return *bidtime_;
}
inline void Tick_ser::set_bidtime(const ::std::string& value) {
  set_has_bidtime();
  if (bidtime_ == &::google::protobuf::internal::kEmptyString) {
    bidtime_ = new ::std::string;
  }
  bidtime_->assign(value);
}
inline void Tick_ser::set_bidtime(const char* value) {
  set_has_bidtime();
  if (bidtime_ == &::google::protobuf::internal::kEmptyString) {
    bidtime_ = new ::std::string;
  }
  bidtime_->assign(value);
}
inline void Tick_ser::set_bidtime(const char* value, size_t size) {
  set_has_bidtime();
  if (bidtime_ == &::google::protobuf::internal::kEmptyString) {
    bidtime_ = new ::std::string;
  }
  bidtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tick_ser::mutable_bidtime() {
  set_has_bidtime();
  if (bidtime_ == &::google::protobuf::internal::kEmptyString) {
    bidtime_ = new ::std::string;
  }
  return bidtime_;
}
inline ::std::string* Tick_ser::release_bidtime() {
  clear_has_bidtime();
  if (bidtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bidtime_;
    bidtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Tick_ser::set_allocated_bidtime(::std::string* bidtime) {
  if (bidtime_ != &::google::protobuf::internal::kEmptyString) {
    delete bidtime_;
  }
  if (bidtime) {
    set_has_bidtime();
    bidtime_ = bidtime;
  } else {
    clear_has_bidtime();
    bidtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float ask = 12 [default = 0];
inline bool Tick_ser::has_ask() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Tick_ser::set_has_ask() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Tick_ser::clear_has_ask() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Tick_ser::clear_ask() {
  ask_ = 0;
  clear_has_ask();
}
inline float Tick_ser::ask() const {
  return ask_;
}
inline void Tick_ser::set_ask(float value) {
  set_has_ask();
  ask_ = value;
}

// optional int32 AskSize = 13 [default = 0];
inline bool Tick_ser::has_asksize() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Tick_ser::set_has_asksize() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Tick_ser::clear_has_asksize() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Tick_ser::clear_asksize() {
  asksize_ = 0;
  clear_has_asksize();
}
inline ::google::protobuf::int32 Tick_ser::asksize() const {
  return asksize_;
}
inline void Tick_ser::set_asksize(::google::protobuf::int32 value) {
  set_has_asksize();
  asksize_ = value;
}

// optional float AskExch = 14 [default = 0];
inline bool Tick_ser::has_askexch() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Tick_ser::set_has_askexch() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Tick_ser::clear_has_askexch() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Tick_ser::clear_askexch() {
  askexch_ = 0;
  clear_has_askexch();
}
inline float Tick_ser::askexch() const {
  return askexch_;
}
inline void Tick_ser::set_askexch(float value) {
  set_has_askexch();
  askexch_ = value;
}

// optional string AskTime = 15;
inline bool Tick_ser::has_asktime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Tick_ser::set_has_asktime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Tick_ser::clear_has_asktime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Tick_ser::clear_asktime() {
  if (asktime_ != &::google::protobuf::internal::kEmptyString) {
    asktime_->clear();
  }
  clear_has_asktime();
}
inline const ::std::string& Tick_ser::asktime() const {
  return *asktime_;
}
inline void Tick_ser::set_asktime(const ::std::string& value) {
  set_has_asktime();
  if (asktime_ == &::google::protobuf::internal::kEmptyString) {
    asktime_ = new ::std::string;
  }
  asktime_->assign(value);
}
inline void Tick_ser::set_asktime(const char* value) {
  set_has_asktime();
  if (asktime_ == &::google::protobuf::internal::kEmptyString) {
    asktime_ = new ::std::string;
  }
  asktime_->assign(value);
}
inline void Tick_ser::set_asktime(const char* value, size_t size) {
  set_has_asktime();
  if (asktime_ == &::google::protobuf::internal::kEmptyString) {
    asktime_ = new ::std::string;
  }
  asktime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tick_ser::mutable_asktime() {
  set_has_asktime();
  if (asktime_ == &::google::protobuf::internal::kEmptyString) {
    asktime_ = new ::std::string;
  }
  return asktime_;
}
inline ::std::string* Tick_ser::release_asktime() {
  clear_has_asktime();
  if (asktime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = asktime_;
    asktime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Tick_ser::set_allocated_asktime(::std::string* asktime) {
  if (asktime_ != &::google::protobuf::internal::kEmptyString) {
    delete asktime_;
  }
  if (asktime) {
    set_has_asktime();
    asktime_ = asktime;
  } else {
    clear_has_asktime();
    asktime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 DailyVolume = 16 [default = 0];
inline bool Tick_ser::has_dailyvolume() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Tick_ser::set_has_dailyvolume() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Tick_ser::clear_has_dailyvolume() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Tick_ser::clear_dailyvolume() {
  dailyvolume_ = 0;
  clear_has_dailyvolume();
}
inline ::google::protobuf::int32 Tick_ser::dailyvolume() const {
  return dailyvolume_;
}
inline void Tick_ser::set_dailyvolume(::google::protobuf::int32 value) {
  set_has_dailyvolume();
  dailyvolume_ = value;
}

// optional float DailyHigh = 17 [default = 0];
inline bool Tick_ser::has_dailyhigh() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Tick_ser::set_has_dailyhigh() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Tick_ser::clear_has_dailyhigh() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Tick_ser::clear_dailyhigh() {
  dailyhigh_ = 0;
  clear_has_dailyhigh();
}
inline float Tick_ser::dailyhigh() const {
  return dailyhigh_;
}
inline void Tick_ser::set_dailyhigh(float value) {
  set_has_dailyhigh();
  dailyhigh_ = value;
}

// optional float DailyLow = 18 [default = 0];
inline bool Tick_ser::has_dailylow() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Tick_ser::set_has_dailylow() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Tick_ser::clear_has_dailylow() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Tick_ser::clear_dailylow() {
  dailylow_ = 0;
  clear_has_dailylow();
}
inline float Tick_ser::dailylow() const {
  return dailylow_;
}
inline void Tick_ser::set_dailylow(float value) {
  set_has_dailylow();
  dailylow_ = value;
}

// optional int32 DailyTrades = 19 [default = 0];
inline bool Tick_ser::has_dailytrades() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Tick_ser::set_has_dailytrades() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Tick_ser::clear_has_dailytrades() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Tick_ser::clear_dailytrades() {
  dailytrades_ = 0;
  clear_has_dailytrades();
}
inline ::google::protobuf::int32 Tick_ser::dailytrades() const {
  return dailytrades_;
}
inline void Tick_ser::set_dailytrades(::google::protobuf::int32 value) {
  set_has_dailytrades();
  dailytrades_ = value;
}

// optional string TimeStamp = 20;
inline bool Tick_ser::has_timestamp() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Tick_ser::set_has_timestamp() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Tick_ser::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Tick_ser::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& Tick_ser::timestamp() const {
  return *timestamp_;
}
inline void Tick_ser::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void Tick_ser::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void Tick_ser::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tick_ser::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}
inline ::std::string* Tick_ser::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Tick_ser::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (timestamp) {
    set_has_timestamp();
    timestamp_ = timestamp;
  } else {
    clear_has_timestamp();
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 OpenInterest = 21 [default = 0];
inline bool Tick_ser::has_openinterest() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Tick_ser::set_has_openinterest() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Tick_ser::clear_has_openinterest() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Tick_ser::clear_openinterest() {
  openinterest_ = 0;
  clear_has_openinterest();
}
inline ::google::protobuf::int32 Tick_ser::openinterest() const {
  return openinterest_;
}
inline void Tick_ser::set_openinterest(::google::protobuf::int32 value) {
  set_has_openinterest();
  openinterest_ = value;
}

// optional string ExpDate = 22;
inline bool Tick_ser::has_expdate() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Tick_ser::set_has_expdate() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Tick_ser::clear_has_expdate() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Tick_ser::clear_expdate() {
  if (expdate_ != &::google::protobuf::internal::kEmptyString) {
    expdate_->clear();
  }
  clear_has_expdate();
}
inline const ::std::string& Tick_ser::expdate() const {
  return *expdate_;
}
inline void Tick_ser::set_expdate(const ::std::string& value) {
  set_has_expdate();
  if (expdate_ == &::google::protobuf::internal::kEmptyString) {
    expdate_ = new ::std::string;
  }
  expdate_->assign(value);
}
inline void Tick_ser::set_expdate(const char* value) {
  set_has_expdate();
  if (expdate_ == &::google::protobuf::internal::kEmptyString) {
    expdate_ = new ::std::string;
  }
  expdate_->assign(value);
}
inline void Tick_ser::set_expdate(const char* value, size_t size) {
  set_has_expdate();
  if (expdate_ == &::google::protobuf::internal::kEmptyString) {
    expdate_ = new ::std::string;
  }
  expdate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tick_ser::mutable_expdate() {
  set_has_expdate();
  if (expdate_ == &::google::protobuf::internal::kEmptyString) {
    expdate_ = new ::std::string;
  }
  return expdate_;
}
inline ::std::string* Tick_ser::release_expdate() {
  clear_has_expdate();
  if (expdate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = expdate_;
    expdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Tick_ser::set_allocated_expdate(::std::string* expdate) {
  if (expdate_ != &::google::protobuf::internal::kEmptyString) {
    delete expdate_;
  }
  if (expdate) {
    set_has_expdate();
    expdate_ = expdate;
  } else {
    clear_has_expdate();
    expdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float Strike = 23 [default = 0];
inline bool Tick_ser::has_strike() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Tick_ser::set_has_strike() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Tick_ser::clear_has_strike() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Tick_ser::clear_strike() {
  strike_ = 0;
  clear_has_strike();
}
inline float Tick_ser::strike() const {
  return strike_;
}
inline void Tick_ser::set_strike(float value) {
  set_has_strike();
  strike_ = value;
}

// optional int32 TickID = 24 [default = 0];
inline bool Tick_ser::has_tickid() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Tick_ser::set_has_tickid() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Tick_ser::clear_has_tickid() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Tick_ser::clear_tickid() {
  tickid_ = 0;
  clear_has_tickid();
}
inline ::google::protobuf::int32 Tick_ser::tickid() const {
  return tickid_;
}
inline void Tick_ser::set_tickid(::google::protobuf::int32 value) {
  set_has_tickid();
  tickid_ = value;
}

// -------------------------------------------------------------------

// Tick_collection_ser

// repeated .Serializable.Tick_ser tick_collection = 1;
inline int Tick_collection_ser::tick_collection_size() const {
  return tick_collection_.size();
}
inline void Tick_collection_ser::clear_tick_collection() {
  tick_collection_.Clear();
}
inline const ::Serializable::Tick_ser& Tick_collection_ser::tick_collection(int index) const {
  return tick_collection_.Get(index);
}
inline ::Serializable::Tick_ser* Tick_collection_ser::mutable_tick_collection(int index) {
  return tick_collection_.Mutable(index);
}
inline ::Serializable::Tick_ser* Tick_collection_ser::add_tick_collection() {
  return tick_collection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Serializable::Tick_ser >&
Tick_collection_ser::tick_collection() const {
  return tick_collection_;
}
inline ::google::protobuf::RepeatedPtrField< ::Serializable::Tick_ser >*
Tick_collection_ser::mutable_tick_collection() {
  return &tick_collection_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serializable

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tick_2eproto__INCLUDED
