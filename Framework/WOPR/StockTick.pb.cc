// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StockTick.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "StockTick.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Serializable {

namespace {

const ::google::protobuf::Descriptor* StockTick_ser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockTick_ser_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_StockTick_2eproto() {
  protobuf_AddDesc_StockTick_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "StockTick.proto");
  GOOGLE_CHECK(file != NULL);
  StockTick_ser_descriptor_ = file->message_type(0);
  static const int StockTick_ser_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTick_ser, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTick_ser, ask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTick_ser, last_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTick_ser, dailyhigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTick_ser, dailylow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTick_ser, bidsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTick_ser, asksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTick_ser, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTick_ser, dvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTick_ser, totaltrades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTick_ser, lmtprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTick_ser, exdivdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTick_ser, exdivpercentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTick_ser, exdivamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTick_ser, symbol_),
  };
  StockTick_ser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StockTick_ser_descriptor_,
      StockTick_ser::default_instance_,
      StockTick_ser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTick_ser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTick_ser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StockTick_ser));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_StockTick_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StockTick_ser_descriptor_, &StockTick_ser::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_StockTick_2eproto() {
  delete StockTick_ser::default_instance_;
  delete StockTick_ser_reflection_;
}

void protobuf_AddDesc_StockTick_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017StockTick.proto\022\014Serializable\"\227\002\n\rStoc"
    "kTick_ser\022\013\n\003Bid\030\001 \001(\002\022\013\n\003Ask\030\002 \001(\002\022\014\n\004L"
    "ast\030\003 \001(\002\022\021\n\tDailyHigh\030\004 \001(\002\022\020\n\010DailyLow"
    "\030\005 \001(\002\022\017\n\007BidSize\030\006 \001(\002\022\017\n\007AskSize\030\007 \001(\002"
    "\022\016\n\006Volume\030\010 \001(\005\022\017\n\007DVolume\030\t \001(\005\022\023\n\013Tot"
    "alTrades\030\n \001(\005\022\020\n\010LmtPrice\030\013 \001(\002\022\021\n\tExDi"
    "vDate\030\014 \001(\t\022\027\n\017ExDivPercentage\030\r \001(\002\022\023\n\013"
    "ExDivAmount\030\016 \001(\002\022\016\n\006symbol\030\017 \001(\t", 313);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StockTick.proto", &protobuf_RegisterTypes);
  StockTick_ser::default_instance_ = new StockTick_ser();
  StockTick_ser::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_StockTick_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_StockTick_2eproto {
  StaticDescriptorInitializer_StockTick_2eproto() {
    protobuf_AddDesc_StockTick_2eproto();
  }
} static_descriptor_initializer_StockTick_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int StockTick_ser::kBidFieldNumber;
const int StockTick_ser::kAskFieldNumber;
const int StockTick_ser::kLastFieldNumber;
const int StockTick_ser::kDailyHighFieldNumber;
const int StockTick_ser::kDailyLowFieldNumber;
const int StockTick_ser::kBidSizeFieldNumber;
const int StockTick_ser::kAskSizeFieldNumber;
const int StockTick_ser::kVolumeFieldNumber;
const int StockTick_ser::kDVolumeFieldNumber;
const int StockTick_ser::kTotalTradesFieldNumber;
const int StockTick_ser::kLmtPriceFieldNumber;
const int StockTick_ser::kExDivDateFieldNumber;
const int StockTick_ser::kExDivPercentageFieldNumber;
const int StockTick_ser::kExDivAmountFieldNumber;
const int StockTick_ser::kSymbolFieldNumber;
#endif  // !_MSC_VER

StockTick_ser::StockTick_ser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StockTick_ser::InitAsDefaultInstance() {
}

StockTick_ser::StockTick_ser(const StockTick_ser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StockTick_ser::SharedCtor() {
  _cached_size_ = 0;
  bid_ = 0;
  ask_ = 0;
  last_ = 0;
  dailyhigh_ = 0;
  dailylow_ = 0;
  bidsize_ = 0;
  asksize_ = 0;
  volume_ = 0;
  dvolume_ = 0;
  totaltrades_ = 0;
  lmtprice_ = 0;
  exdivdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exdivpercentage_ = 0;
  exdivamount_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockTick_ser::~StockTick_ser() {
  SharedDtor();
}

void StockTick_ser::SharedDtor() {
  if (exdivdate_ != &::google::protobuf::internal::kEmptyString) {
    delete exdivdate_;
  }
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void StockTick_ser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockTick_ser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockTick_ser_descriptor_;
}

const StockTick_ser& StockTick_ser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StockTick_2eproto();
  return *default_instance_;
}

StockTick_ser* StockTick_ser::default_instance_ = NULL;

StockTick_ser* StockTick_ser::New() const {
  return new StockTick_ser;
}

void StockTick_ser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bid_ = 0;
    ask_ = 0;
    last_ = 0;
    dailyhigh_ = 0;
    dailylow_ = 0;
    bidsize_ = 0;
    asksize_ = 0;
    volume_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dvolume_ = 0;
    totaltrades_ = 0;
    lmtprice_ = 0;
    if (has_exdivdate()) {
      if (exdivdate_ != &::google::protobuf::internal::kEmptyString) {
        exdivdate_->clear();
      }
    }
    exdivpercentage_ = 0;
    exdivamount_ = 0;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StockTick_ser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float Bid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Ask;
        break;
      }

      // optional float Ask = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Ask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ask_)));
          set_has_ask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Last;
        break;
      }

      // optional float Last = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Last:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &last_)));
          set_has_last();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_DailyHigh;
        break;
      }

      // optional float DailyHigh = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_DailyHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dailyhigh_)));
          set_has_dailyhigh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_DailyLow;
        break;
      }

      // optional float DailyLow = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_DailyLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dailylow_)));
          set_has_dailylow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_BidSize;
        break;
      }

      // optional float BidSize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BidSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bidsize_)));
          set_has_bidsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_AskSize;
        break;
      }

      // optional float AskSize = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AskSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &asksize_)));
          set_has_asksize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Volume;
        break;
      }

      // optional int32 Volume = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_DVolume;
        break;
      }

      // optional int32 DVolume = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dvolume_)));
          set_has_dvolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_TotalTrades;
        break;
      }

      // optional int32 TotalTrades = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalTrades:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totaltrades_)));
          set_has_totaltrades();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_LmtPrice;
        break;
      }

      // optional float LmtPrice = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_LmtPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lmtprice_)));
          set_has_lmtprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ExDivDate;
        break;
      }

      // optional string ExDivDate = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExDivDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exdivdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exdivdate().data(), this->exdivdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_ExDivPercentage;
        break;
      }

      // optional float ExDivPercentage = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ExDivPercentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &exdivpercentage_)));
          set_has_exdivpercentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_ExDivAmount;
        break;
      }

      // optional float ExDivAmount = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ExDivAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &exdivamount_)));
          set_has_exdivamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_symbol;
        break;
      }

      // optional string symbol = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockTick_ser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float Bid = 1;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->bid(), output);
  }

  // optional float Ask = 2;
  if (has_ask()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ask(), output);
  }

  // optional float Last = 3;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->last(), output);
  }

  // optional float DailyHigh = 4;
  if (has_dailyhigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dailyhigh(), output);
  }

  // optional float DailyLow = 5;
  if (has_dailylow()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->dailylow(), output);
  }

  // optional float BidSize = 6;
  if (has_bidsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->bidsize(), output);
  }

  // optional float AskSize = 7;
  if (has_asksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->asksize(), output);
  }

  // optional int32 Volume = 8;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->volume(), output);
  }

  // optional int32 DVolume = 9;
  if (has_dvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->dvolume(), output);
  }

  // optional int32 TotalTrades = 10;
  if (has_totaltrades()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->totaltrades(), output);
  }

  // optional float LmtPrice = 11;
  if (has_lmtprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->lmtprice(), output);
  }

  // optional string ExDivDate = 12;
  if (has_exdivdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exdivdate().data(), this->exdivdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->exdivdate(), output);
  }

  // optional float ExDivPercentage = 13;
  if (has_exdivpercentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->exdivpercentage(), output);
  }

  // optional float ExDivAmount = 14;
  if (has_exdivamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->exdivamount(), output);
  }

  // optional string symbol = 15;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->symbol(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StockTick_ser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float Bid = 1;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->bid(), target);
  }

  // optional float Ask = 2;
  if (has_ask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ask(), target);
  }

  // optional float Last = 3;
  if (has_last()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->last(), target);
  }

  // optional float DailyHigh = 4;
  if (has_dailyhigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dailyhigh(), target);
  }

  // optional float DailyLow = 5;
  if (has_dailylow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->dailylow(), target);
  }

  // optional float BidSize = 6;
  if (has_bidsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->bidsize(), target);
  }

  // optional float AskSize = 7;
  if (has_asksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->asksize(), target);
  }

  // optional int32 Volume = 8;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->volume(), target);
  }

  // optional int32 DVolume = 9;
  if (has_dvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dvolume(), target);
  }

  // optional int32 TotalTrades = 10;
  if (has_totaltrades()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->totaltrades(), target);
  }

  // optional float LmtPrice = 11;
  if (has_lmtprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->lmtprice(), target);
  }

  // optional string ExDivDate = 12;
  if (has_exdivdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exdivdate().data(), this->exdivdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->exdivdate(), target);
  }

  // optional float ExDivPercentage = 13;
  if (has_exdivpercentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->exdivpercentage(), target);
  }

  // optional float ExDivAmount = 14;
  if (has_exdivamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->exdivamount(), target);
  }

  // optional string symbol = 15;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->symbol(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StockTick_ser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float Bid = 1;
    if (has_bid()) {
      total_size += 1 + 4;
    }

    // optional float Ask = 2;
    if (has_ask()) {
      total_size += 1 + 4;
    }

    // optional float Last = 3;
    if (has_last()) {
      total_size += 1 + 4;
    }

    // optional float DailyHigh = 4;
    if (has_dailyhigh()) {
      total_size += 1 + 4;
    }

    // optional float DailyLow = 5;
    if (has_dailylow()) {
      total_size += 1 + 4;
    }

    // optional float BidSize = 6;
    if (has_bidsize()) {
      total_size += 1 + 4;
    }

    // optional float AskSize = 7;
    if (has_asksize()) {
      total_size += 1 + 4;
    }

    // optional int32 Volume = 8;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 DVolume = 9;
    if (has_dvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dvolume());
    }

    // optional int32 TotalTrades = 10;
    if (has_totaltrades()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totaltrades());
    }

    // optional float LmtPrice = 11;
    if (has_lmtprice()) {
      total_size += 1 + 4;
    }

    // optional string ExDivDate = 12;
    if (has_exdivdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exdivdate());
    }

    // optional float ExDivPercentage = 13;
    if (has_exdivpercentage()) {
      total_size += 1 + 4;
    }

    // optional float ExDivAmount = 14;
    if (has_exdivamount()) {
      total_size += 1 + 4;
    }

    // optional string symbol = 15;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockTick_ser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StockTick_ser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StockTick_ser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockTick_ser::MergeFrom(const StockTick_ser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_ask()) {
      set_ask(from.ask());
    }
    if (from.has_last()) {
      set_last(from.last());
    }
    if (from.has_dailyhigh()) {
      set_dailyhigh(from.dailyhigh());
    }
    if (from.has_dailylow()) {
      set_dailylow(from.dailylow());
    }
    if (from.has_bidsize()) {
      set_bidsize(from.bidsize());
    }
    if (from.has_asksize()) {
      set_asksize(from.asksize());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dvolume()) {
      set_dvolume(from.dvolume());
    }
    if (from.has_totaltrades()) {
      set_totaltrades(from.totaltrades());
    }
    if (from.has_lmtprice()) {
      set_lmtprice(from.lmtprice());
    }
    if (from.has_exdivdate()) {
      set_exdivdate(from.exdivdate());
    }
    if (from.has_exdivpercentage()) {
      set_exdivpercentage(from.exdivpercentage());
    }
    if (from.has_exdivamount()) {
      set_exdivamount(from.exdivamount());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StockTick_ser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockTick_ser::CopyFrom(const StockTick_ser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockTick_ser::IsInitialized() const {

  return true;
}

void StockTick_ser::Swap(StockTick_ser* other) {
  if (other != this) {
    std::swap(bid_, other->bid_);
    std::swap(ask_, other->ask_);
    std::swap(last_, other->last_);
    std::swap(dailyhigh_, other->dailyhigh_);
    std::swap(dailylow_, other->dailylow_);
    std::swap(bidsize_, other->bidsize_);
    std::swap(asksize_, other->asksize_);
    std::swap(volume_, other->volume_);
    std::swap(dvolume_, other->dvolume_);
    std::swap(totaltrades_, other->totaltrades_);
    std::swap(lmtprice_, other->lmtprice_);
    std::swap(exdivdate_, other->exdivdate_);
    std::swap(exdivpercentage_, other->exdivpercentage_);
    std::swap(exdivamount_, other->exdivamount_);
    std::swap(symbol_, other->symbol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StockTick_ser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockTick_ser_descriptor_;
  metadata.reflection = StockTick_ser_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serializable

// @@protoc_insertion_point(global_scope)
