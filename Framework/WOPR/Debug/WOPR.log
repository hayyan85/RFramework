Build started 10/24/2013 8:49:36 AM.
     1>Project "C:\rsquared\Framework\WOPR\WOPR.vcxproj" on node 2 (build target(s)).
     1>InitializeBuildStatus:
         Creating "Debug\WOPR.unsuccessfulbuild" because "AlwaysCreate" was specified.
       CustomBuild:
         All outputs are up-to-date.
       ClCompile:
         c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\CL.exe /c /I.\GeneratedFiles /I. /IC:\Qt\4.8.4\include /I.\GeneratedFiles\Debug /IC:\Qt\4.8.4\include\QtCore /IC:\Qt\4.8.4\include\QtGui /IC:\Qt\4.8.4\include\QtNetwork /I"..\..\External\boost-win-1.47-32bit-vs2010\include\boost-1_47" /I"..\..\External\ta-lib-0.4.0-msvc\ta-lib\c\include\\" /I"..\..\External\Qpid-32Bit\Debug\include\\" /I"..\..\External\log4cplus-1.1.2-rc1\include" /I"..\..\External\protoc-2.5.0-win32\protobuf-2.5.0-src\src\\" /I"..\..\External\MySQLBuild-32Bit\Include" /I"..\..\External\QuantLib-1.3\\" /Zi /nologo /W1 /WX- /Od /Oy- /D WIN32 /D QT_LARGEFILE_SUPPORT /D QT_DLL /D QT_CORE_LIB /D QT_GUI_LIB /D _WIN32_WINNT=0x0501 /D PROTOBUF_USE_DLLS /D QT_NETWORK_LIB /Gm- /EHsc /MDd /GS /fp:precise /Zc:wchar_t- /Zc:forScope /openmp /Fo"Debug\\" /Fd"Debug\vc100.pdb" /Gd /TP /analyze- /errorReport:prompt AddOptionSymbol.cpp FeedConnector.cpp FeedProcessor.cpp GeneratedFiles\Debug\moc_AddOptionSymbol.cpp GeneratedFiles\Debug\moc_OptionFeeds.cpp GeneratedFiles\Debug\moc_TDisplay.cpp GeneratedFiles\Debug\moc_UpdateFeeds.cpp GeneratedFiles\Debug\moc_Wopr.cpp "MySQL-WOPR.cpp" Network.cpp OptionFeeds.cpp QueSilo.cpp TDisplay.cpp TickStorage.cpp UpdateFeeds.cpp Wopr.cpp main.cpp
         AddOptionSymbol.cpp
         FeedConnector.cpp
     1>FeedConnector.cpp(239): warning C4482: nonstandard extension used: enum 'Framework::WOPR::FeedConnector::FMessage' used in qualified name
     1>FeedConnector.cpp(241): warning C4482: nonstandard extension used: enum 'Framework::WOPR::FeedConnector::FMessage' used in qualified name
     1>FeedConnector.cpp(243): warning C4482: nonstandard extension used: enum 'Framework::WOPR::FeedConnector::FMessage' used in qualified name
     1>FeedConnector.cpp(245): warning C4482: nonstandard extension used: enum 'Framework::WOPR::FeedConnector::FMessage' used in qualified name
     1>FeedConnector.cpp(247): warning C4482: nonstandard extension used: enum 'Framework::WOPR::FeedConnector::FMessage' used in qualified name
     1>FeedConnector.cpp(249): warning C4482: nonstandard extension used: enum 'Framework::WOPR::FeedConnector::FMessage' used in qualified name
     1>FeedConnector.cpp(266): warning C4482: nonstandard extension used: enum 'Framework::WOPR::FeedConnector::FMessage' used in qualified name
     1>FeedConnector.cpp(267): warning C4482: nonstandard extension used: enum 'Framework::WOPR::FeedConnector::FMessage' used in qualified name
     1>FeedConnector.cpp(268): warning C4482: nonstandard extension used: enum 'Framework::WOPR::FeedConnector::FMessage' used in qualified name
     1>FeedConnector.cpp(301): warning C4482: nonstandard extension used: enum 'Framework::WOPR::FeedConnector::FMessage' used in qualified name
     1>FeedConnector.cpp(302): warning C4482: nonstandard extension used: enum 'Framework::WOPR::FeedConnector::FMessage' used in qualified name
     1>FeedConnector.cpp(303): warning C4482: nonstandard extension used: enum 'Framework::WOPR::FeedConnector::FMessage' used in qualified name
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(229) : see reference to function template instantiation '_OutIt std::copy<QuantLib::Array::const_iterator,QuantLib::Array::iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _InIt=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(3063): warning C4996: 'std::_Equal1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(3048) : see declaration of 'std::_Equal1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(290) : see reference to function template instantiation 'bool std::equal<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator>(_InIt1,_InIt1,_InIt2)' being compiled
                 with
                 [
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(307) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::plus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::plus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(314) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(323) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::minus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::minus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(329) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(338) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::multiplies<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::multiplies<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(344) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(353) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::divides<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::divides<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(359) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(106): warning C4996: 'std::_Inner_product1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(90) : see declaration of 'std::_Inner_product1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(475) : see reference to function template instantiation '_Ty std::inner_product<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,double>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(490) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::negate<_Ty>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::negate<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(504) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::plus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::plus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(511) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(518) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(529) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::minus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::minus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(536) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(543) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(554) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::multiplies<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::multiplies<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(561) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(568) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(579) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::divides<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::divides<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(586) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(593) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(602) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::pointer_to_unary_function<_Arg,_Result,_Fn>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Arg=QuantLib::Real,
                     _Result=QuantLib::Real,
                     _Fn=QuantLib::Real (__cdecl *)(QuantLib::Real),
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(630) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::pointer_to_binary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real,QuantLib::Real)>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::pointer_to_binary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real,QuantLib::Real)>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(106): warning C4996: 'std::_Inner_product1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(90) : see declaration of 'std::_Inner_product1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrix.hpp(507) : see reference to function template instantiation '_Ty std::inner_product<QuantLib::Array::const_iterator,QuantLib::Matrix::const_column_iterator,double>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Matrix::const_column_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrix.hpp(545) : see reference to function template instantiation '_OutIt std::copy<QuantLib::Matrix::const_row_iterator,QuantLib::Matrix::column_iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Matrix::column_iterator,
                     _InIt=QuantLib::Matrix::const_row_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(348): warning C4996: 'std::_Uninitialized_copy0': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(333) : see declaration of 'std::_Uninitialized_copy0'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(94) : see reference to function template instantiation '_FwdIt std::uninitialized_copy<const unsigned int*,unsigned int*>(_InIt,_InIt,_FwdIt)' being compiled
                 with
                 [
                     _FwdIt=unsigned int *,
                     _InIt=const unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(89) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T>::unbounded_array(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=size_t
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2637) : see reference to class template instantiation 'boost::numeric::ublas::unbounded_array<T>' being compiled
                 with
                 [
                     T=size_t
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrixutilities/sparsematrix.hpp(53) : see reference to class template instantiation 'boost::numeric::ublas::compressed_matrix<T>' being compiled
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(348): warning C4996: 'std::_Uninitialized_copy0': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(333) : see declaration of 'std::_Uninitialized_copy0'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(94) : see reference to function template instantiation '_FwdIt std::uninitialized_copy<const double*,double*>(_InIt,_InIt,_FwdIt)' being compiled
                 with
                 [
                     _FwdIt=double *,
                     _InIt=const double *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(89) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T>::unbounded_array(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(3979) : see reference to class template instantiation 'boost::numeric::ublas::unbounded_array<T>' being compiled
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(126) : see reference to function template instantiation '_OutIt std::copy<std::_Vector_const_iterator<_Myvec>,QuantLib::Array::iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Myvec=std::_Vector_val<QuantLib::Time,std::allocator<QuantLib::Time>>,
                     _InIt=std::_Vector_const_iterator<std::_Vector_val<QuantLib::Time,std::allocator<QuantLib::Time>>>
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(124) : while compiling class template member function 'void QuantLib::FdmNdimSolver<N>::performCalculations(void) const'
                 with
                 [
                     N=1
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(181) : see reference to class template instantiation 'QuantLib::FdmNdimSolver<N>' being compiled
                 with
                 [
                     N=1
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/sampledcurve.hpp(108) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,T>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     T=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/math/sampledcurve.hpp(92) : see reference to function template instantiation 'void QuantLib::SampledCurve::regrid<std::pointer_to_unary_function<_Arg,_Result,_Fn>>(const QuantLib::Array &,T)' being compiled
                 with
                 [
                     _Arg=QuantLib::Real,
                     _Result=QuantLib::Real,
                     _Fn=QuantLib::Real (__cdecl *)(QuantLib::Real),
                     T=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(204) : see reference to function template instantiation '_OutIt std::copy<unsigned int*,unsigned int*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=unsigned int *,
                     _InIt=unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(201) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T> &boost::numeric::ublas::unbounded_array<T>::operator =(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=size_t
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(204) : see reference to function template instantiation '_OutIt std::copy<double*,double*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=double *,
                     _InIt=double *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(201) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T> &boost::numeric::ublas::unbounded_array<T>::operator =(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2515): warning C4996: 'std::_Copy_backward': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2500) : see declaration of 'std::_Copy_backward'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2906) : see reference to function template instantiation '_BidIt2 std::copy_backward<unsigned int*,unsigned int*>(_BidIt1,_BidIt1,_BidIt2)' being compiled
                 with
                 [
                     _BidIt2=unsigned int *,
                     _BidIt1=unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2887) : while compiling class template member function 'double &boost::numeric::ublas::compressed_matrix<T>::insert_element(unsigned int,unsigned int,const double &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2515): warning C4996: 'std::_Copy_backward': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2500) : see declaration of 'std::_Copy_backward'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2909) : see reference to function template instantiation '_BidIt2 std::copy_backward<double*,double*>(_BidIt1,_BidIt1,_BidIt2)' being compiled
                 with
                 [
                     _BidIt2=double *,
                     _BidIt1=double *
                 ]
         FeedProcessor.cpp
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(229) : see reference to function template instantiation '_OutIt std::copy<QuantLib::Array::const_iterator,QuantLib::Array::iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _InIt=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(3063): warning C4996: 'std::_Equal1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(3048) : see declaration of 'std::_Equal1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(290) : see reference to function template instantiation 'bool std::equal<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator>(_InIt1,_InIt1,_InIt2)' being compiled
                 with
                 [
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(307) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::plus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::plus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(314) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(323) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::minus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::minus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(329) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(338) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::multiplies<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::multiplies<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(344) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(353) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::divides<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::divides<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(359) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(106): warning C4996: 'std::_Inner_product1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(90) : see declaration of 'std::_Inner_product1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(475) : see reference to function template instantiation '_Ty std::inner_product<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,double>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(490) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::negate<_Ty>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::negate<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(504) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::plus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::plus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(511) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(518) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(529) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::minus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::minus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(536) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(543) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(554) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::multiplies<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::multiplies<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(561) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(568) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(579) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::divides<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::divides<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(586) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(593) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(602) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::pointer_to_unary_function<_Arg,_Result,_Fn>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Arg=QuantLib::Real,
                     _Result=QuantLib::Real,
                     _Fn=QuantLib::Real (__cdecl *)(QuantLib::Real),
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(630) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::pointer_to_binary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real,QuantLib::Real)>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::pointer_to_binary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real,QuantLib::Real)>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(106): warning C4996: 'std::_Inner_product1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(90) : see declaration of 'std::_Inner_product1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrix.hpp(507) : see reference to function template instantiation '_Ty std::inner_product<QuantLib::Array::const_iterator,QuantLib::Matrix::const_column_iterator,double>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Matrix::const_column_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrix.hpp(545) : see reference to function template instantiation '_OutIt std::copy<QuantLib::Matrix::const_row_iterator,QuantLib::Matrix::column_iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Matrix::column_iterator,
                     _InIt=QuantLib::Matrix::const_row_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(348): warning C4996: 'std::_Uninitialized_copy0': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(333) : see declaration of 'std::_Uninitialized_copy0'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(94) : see reference to function template instantiation '_FwdIt std::uninitialized_copy<const unsigned int*,unsigned int*>(_InIt,_InIt,_FwdIt)' being compiled
                 with
                 [
                     _FwdIt=unsigned int *,
                     _InIt=const unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(89) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T>::unbounded_array(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=size_t
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2637) : see reference to class template instantiation 'boost::numeric::ublas::unbounded_array<T>' being compiled
                 with
                 [
                     T=size_t
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrixutilities/sparsematrix.hpp(53) : see reference to class template instantiation 'boost::numeric::ublas::compressed_matrix<T>' being compiled
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(348): warning C4996: 'std::_Uninitialized_copy0': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(333) : see declaration of 'std::_Uninitialized_copy0'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(94) : see reference to function template instantiation '_FwdIt std::uninitialized_copy<const double*,double*>(_InIt,_InIt,_FwdIt)' being compiled
                 with
                 [
                     _FwdIt=double *,
                     _InIt=const double *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(89) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T>::unbounded_array(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(3979) : see reference to class template instantiation 'boost::numeric::ublas::unbounded_array<T>' being compiled
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(126) : see reference to function template instantiation '_OutIt std::copy<std::_Vector_const_iterator<_Myvec>,QuantLib::Array::iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Myvec=std::_Vector_val<QuantLib::Time,std::allocator<QuantLib::Time>>,
                     _InIt=std::_Vector_const_iterator<std::_Vector_val<QuantLib::Time,std::allocator<QuantLib::Time>>>
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(124) : while compiling class template member function 'void QuantLib::FdmNdimSolver<N>::performCalculations(void) const'
                 with
                 [
                     N=1
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(181) : see reference to class template instantiation 'QuantLib::FdmNdimSolver<N>' being compiled
                 with
                 [
                     N=1
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/sampledcurve.hpp(108) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,T>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     T=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/math/sampledcurve.hpp(92) : see reference to function template instantiation 'void QuantLib::SampledCurve::regrid<std::pointer_to_unary_function<_Arg,_Result,_Fn>>(const QuantLib::Array &,T)' being compiled
                 with
                 [
                     _Arg=QuantLib::Real,
                     _Result=QuantLib::Real,
                     _Fn=QuantLib::Real (__cdecl *)(QuantLib::Real),
                     T=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(204) : see reference to function template instantiation '_OutIt std::copy<unsigned int*,unsigned int*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=unsigned int *,
                     _InIt=unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(201) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T> &boost::numeric::ublas::unbounded_array<T>::operator =(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=size_t
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(204) : see reference to function template instantiation '_OutIt std::copy<double*,double*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=double *,
                     _InIt=double *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(201) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T> &boost::numeric::ublas::unbounded_array<T>::operator =(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2515): warning C4996: 'std::_Copy_backward': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2500) : see declaration of 'std::_Copy_backward'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2906) : see reference to function template instantiation '_BidIt2 std::copy_backward<unsigned int*,unsigned int*>(_BidIt1,_BidIt1,_BidIt2)' being compiled
                 with
                 [
                     _BidIt2=unsigned int *,
                     _BidIt1=unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2887) : while compiling class template member function 'double &boost::numeric::ublas::compressed_matrix<T>::insert_element(unsigned int,unsigned int,const double &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2515): warning C4996: 'std::_Copy_backward': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2500) : see declaration of 'std::_Copy_backward'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2909) : see reference to function template instantiation '_BidIt2 std::copy_backward<double*,double*>(_BidIt1,_BidIt1,_BidIt2)' being compiled
                 with
                 [
                     _BidIt2=double *,
                     _BidIt1=double *
                 ]
         moc_AddOptionSymbol.cpp
         moc_OptionFeeds.cpp
         moc_TDisplay.cpp
         moc_UpdateFeeds.cpp
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(229) : see reference to function template instantiation '_OutIt std::copy<QuantLib::Array::const_iterator,QuantLib::Array::iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _InIt=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(3063): warning C4996: 'std::_Equal1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(3048) : see declaration of 'std::_Equal1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(290) : see reference to function template instantiation 'bool std::equal<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator>(_InIt1,_InIt1,_InIt2)' being compiled
                 with
                 [
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(307) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::plus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::plus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(314) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(323) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::minus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::minus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(329) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(338) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::multiplies<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::multiplies<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(344) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(353) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::divides<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::divides<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(359) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(106): warning C4996: 'std::_Inner_product1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(90) : see declaration of 'std::_Inner_product1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(475) : see reference to function template instantiation '_Ty std::inner_product<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,double>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(490) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::negate<_Ty>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::negate<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(504) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::plus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::plus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(511) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(518) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(529) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::minus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::minus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(536) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(543) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(554) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::multiplies<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::multiplies<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(561) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(568) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(579) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::divides<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::divides<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(586) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(593) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(602) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::pointer_to_unary_function<_Arg,_Result,_Fn>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Arg=QuantLib::Real,
                     _Result=QuantLib::Real,
                     _Fn=QuantLib::Real (__cdecl *)(QuantLib::Real),
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(630) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::pointer_to_binary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real,QuantLib::Real)>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::pointer_to_binary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real,QuantLib::Real)>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(106): warning C4996: 'std::_Inner_product1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(90) : see declaration of 'std::_Inner_product1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrix.hpp(507) : see reference to function template instantiation '_Ty std::inner_product<QuantLib::Array::const_iterator,QuantLib::Matrix::const_column_iterator,double>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Matrix::const_column_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrix.hpp(545) : see reference to function template instantiation '_OutIt std::copy<QuantLib::Matrix::const_row_iterator,QuantLib::Matrix::column_iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Matrix::column_iterator,
                     _InIt=QuantLib::Matrix::const_row_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(348): warning C4996: 'std::_Uninitialized_copy0': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(333) : see declaration of 'std::_Uninitialized_copy0'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(94) : see reference to function template instantiation '_FwdIt std::uninitialized_copy<const unsigned int*,unsigned int*>(_InIt,_InIt,_FwdIt)' being compiled
                 with
                 [
                     _FwdIt=unsigned int *,
                     _InIt=const unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(89) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T>::unbounded_array(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=size_t
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2637) : see reference to class template instantiation 'boost::numeric::ublas::unbounded_array<T>' being compiled
                 with
                 [
                     T=size_t
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrixutilities/sparsematrix.hpp(53) : see reference to class template instantiation 'boost::numeric::ublas::compressed_matrix<T>' being compiled
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(348): warning C4996: 'std::_Uninitialized_copy0': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(333) : see declaration of 'std::_Uninitialized_copy0'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(94) : see reference to function template instantiation '_FwdIt std::uninitialized_copy<const double*,double*>(_InIt,_InIt,_FwdIt)' being compiled
                 with
                 [
                     _FwdIt=double *,
                     _InIt=const double *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(89) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T>::unbounded_array(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(3979) : see reference to class template instantiation 'boost::numeric::ublas::unbounded_array<T>' being compiled
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(126) : see reference to function template instantiation '_OutIt std::copy<std::_Vector_const_iterator<_Myvec>,QuantLib::Array::iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Myvec=std::_Vector_val<QuantLib::Time,std::allocator<QuantLib::Time>>,
                     _InIt=std::_Vector_const_iterator<std::_Vector_val<QuantLib::Time,std::allocator<QuantLib::Time>>>
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(124) : while compiling class template member function 'void QuantLib::FdmNdimSolver<N>::performCalculations(void) const'
                 with
                 [
                     N=1
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(181) : see reference to class template instantiation 'QuantLib::FdmNdimSolver<N>' being compiled
                 with
                 [
                     N=1
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/sampledcurve.hpp(108) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,T>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     T=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/math/sampledcurve.hpp(92) : see reference to function template instantiation 'void QuantLib::SampledCurve::regrid<std::pointer_to_unary_function<_Arg,_Result,_Fn>>(const QuantLib::Array &,T)' being compiled
                 with
                 [
                     _Arg=QuantLib::Real,
                     _Result=QuantLib::Real,
                     _Fn=QuantLib::Real (__cdecl *)(QuantLib::Real),
                     T=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(204) : see reference to function template instantiation '_OutIt std::copy<unsigned int*,unsigned int*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=unsigned int *,
                     _InIt=unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(201) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T> &boost::numeric::ublas::unbounded_array<T>::operator =(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=size_t
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(204) : see reference to function template instantiation '_OutIt std::copy<double*,double*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=double *,
                     _InIt=double *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(201) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T> &boost::numeric::ublas::unbounded_array<T>::operator =(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2515): warning C4996: 'std::_Copy_backward': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2500) : see declaration of 'std::_Copy_backward'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2906) : see reference to function template instantiation '_BidIt2 std::copy_backward<unsigned int*,unsigned int*>(_BidIt1,_BidIt1,_BidIt2)' being compiled
                 with
                 [
                     _BidIt2=unsigned int *,
                     _BidIt1=unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2887) : while compiling class template member function 'double &boost::numeric::ublas::compressed_matrix<T>::insert_element(unsigned int,unsigned int,const double &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2515): warning C4996: 'std::_Copy_backward': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2500) : see declaration of 'std::_Copy_backward'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2909) : see reference to function template instantiation '_BidIt2 std::copy_backward<double*,double*>(_BidIt1,_BidIt1,_BidIt2)' being compiled
                 with
                 [
                     _BidIt2=double *,
                     _BidIt1=double *
                 ]
         moc_Wopr.cpp
         MySQL-WOPR.cpp
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1010): warning C4996: 'std::_Swap_ranges': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(995) : see declaration of 'std::_Swap_ranges'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/uuid/uuid.hpp(151) : see reference to function template instantiation '_FwdIt2 std::swap_ranges<boost::uuids::uuid::iterator,boost::uuids::uuid::iterator>(_FwdIt1,_FwdIt1,_FwdIt2)' being compiled
                 with
                 [
                     _FwdIt2=boost::uuids::uuid::iterator,
                     _FwdIt1=boost::uuids::uuid::iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(3063): warning C4996: 'std::_Equal1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(3048) : see declaration of 'std::_Equal1'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/uuid/uuid.hpp(161) : see reference to function template instantiation 'bool std::equal<boost::uuids::uuid::const_iterator,boost::uuids::uuid::const_iterator>(_InIt1,_InIt1,_InIt2)' being compiled
                 with
                 [
                     _InIt1=boost::uuids::uuid::const_iterator,
                     _InIt2=boost::uuids::uuid::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(229) : see reference to function template instantiation '_OutIt std::copy<QuantLib::Array::const_iterator,QuantLib::Array::iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _InIt=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(3063): warning C4996: 'std::_Equal1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(3048) : see declaration of 'std::_Equal1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(290) : see reference to function template instantiation 'bool std::equal<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator>(_InIt1,_InIt1,_InIt2)' being compiled
                 with
                 [
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(307) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::plus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::plus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(314) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(323) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::minus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::minus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(329) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(338) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::multiplies<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::multiplies<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(344) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(353) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::divides<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::divides<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(359) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(106): warning C4996: 'std::_Inner_product1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(90) : see declaration of 'std::_Inner_product1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(475) : see reference to function template instantiation '_Ty std::inner_product<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,double>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(490) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::negate<_Ty>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::negate<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(504) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::plus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::plus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(511) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(518) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(529) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::minus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::minus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(536) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(543) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(554) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::multiplies<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::multiplies<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(561) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(568) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(579) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::divides<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::divides<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(586) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(593) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(602) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::pointer_to_unary_function<_Arg,_Result,_Fn>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Arg=QuantLib::Real,
                     _Result=QuantLib::Real,
                     _Fn=QuantLib::Real (__cdecl *)(QuantLib::Real),
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(630) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::pointer_to_binary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real,QuantLib::Real)>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::pointer_to_binary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real,QuantLib::Real)>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(106): warning C4996: 'std::_Inner_product1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(90) : see declaration of 'std::_Inner_product1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrix.hpp(507) : see reference to function template instantiation '_Ty std::inner_product<QuantLib::Array::const_iterator,QuantLib::Matrix::const_column_iterator,double>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Matrix::const_column_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrix.hpp(545) : see reference to function template instantiation '_OutIt std::copy<QuantLib::Matrix::const_row_iterator,QuantLib::Matrix::column_iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Matrix::column_iterator,
                     _InIt=QuantLib::Matrix::const_row_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(348): warning C4996: 'std::_Uninitialized_copy0': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(333) : see declaration of 'std::_Uninitialized_copy0'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(94) : see reference to function template instantiation '_FwdIt std::uninitialized_copy<const unsigned int*,unsigned int*>(_InIt,_InIt,_FwdIt)' being compiled
                 with
                 [
                     _FwdIt=unsigned int *,
                     _InIt=const unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(89) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T>::unbounded_array(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=size_t
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2637) : see reference to class template instantiation 'boost::numeric::ublas::unbounded_array<T>' being compiled
                 with
                 [
                     T=size_t
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrixutilities/sparsematrix.hpp(53) : see reference to class template instantiation 'boost::numeric::ublas::compressed_matrix<T>' being compiled
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(348): warning C4996: 'std::_Uninitialized_copy0': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(333) : see declaration of 'std::_Uninitialized_copy0'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(94) : see reference to function template instantiation '_FwdIt std::uninitialized_copy<const double*,double*>(_InIt,_InIt,_FwdIt)' being compiled
                 with
                 [
                     _FwdIt=double *,
                     _InIt=const double *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(89) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T>::unbounded_array(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(3979) : see reference to class template instantiation 'boost::numeric::ublas::unbounded_array<T>' being compiled
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(126) : see reference to function template instantiation '_OutIt std::copy<std::_Vector_const_iterator<_Myvec>,QuantLib::Array::iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Myvec=std::_Vector_val<qreal,std::allocator<qreal>>,
                     _InIt=std::_Vector_const_iterator<std::_Vector_val<qreal,std::allocator<qreal>>>
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(124) : while compiling class template member function 'void QuantLib::FdmNdimSolver<N>::performCalculations(void) const'
                 with
                 [
                     N=1
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(181) : see reference to class template instantiation 'QuantLib::FdmNdimSolver<N>' being compiled
                 with
                 [
                     N=1
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/sampledcurve.hpp(108) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,T>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     T=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/math/sampledcurve.hpp(92) : see reference to function template instantiation 'void QuantLib::SampledCurve::regrid<std::pointer_to_unary_function<_Arg,_Result,_Fn>>(const QuantLib::Array &,T)' being compiled
                 with
                 [
                     _Arg=QuantLib::Real,
                     _Result=QuantLib::Real,
                     _Fn=QuantLib::Real (__cdecl *)(QuantLib::Real),
                     T=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(204) : see reference to function template instantiation '_OutIt std::copy<unsigned int*,unsigned int*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=unsigned int *,
                     _InIt=unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(201) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T> &boost::numeric::ublas::unbounded_array<T>::operator =(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=size_t
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(204) : see reference to function template instantiation '_OutIt std::copy<double*,double*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=double *,
                     _InIt=double *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(201) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T> &boost::numeric::ublas::unbounded_array<T>::operator =(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2515): warning C4996: 'std::_Copy_backward': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2500) : see declaration of 'std::_Copy_backward'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2906) : see reference to function template instantiation '_BidIt2 std::copy_backward<unsigned int*,unsigned int*>(_BidIt1,_BidIt1,_BidIt2)' being compiled
                 with
                 [
                     _BidIt2=unsigned int *,
                     _BidIt1=unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2887) : while compiling class template member function 'double &boost::numeric::ublas::compressed_matrix<T>::insert_element(unsigned int,unsigned int,const double &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2515): warning C4996: 'std::_Copy_backward': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2500) : see declaration of 'std::_Copy_backward'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2909) : see reference to function template instantiation '_BidIt2 std::copy_backward<double*,double*>(_BidIt1,_BidIt1,_BidIt2)' being compiled
                 with
                 [
                     _BidIt2=double *,
                     _BidIt1=double *
                 ]
         Network.cpp
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(229) : see reference to function template instantiation '_OutIt std::copy<QuantLib::Array::const_iterator,QuantLib::Array::iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _InIt=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(3063): warning C4996: 'std::_Equal1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(3048) : see declaration of 'std::_Equal1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(290) : see reference to function template instantiation 'bool std::equal<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator>(_InIt1,_InIt1,_InIt2)' being compiled
                 with
                 [
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(307) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::plus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::plus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(314) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(323) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::minus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::minus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(329) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(338) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::multiplies<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::multiplies<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(344) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(353) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::divides<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::divides<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(359) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(106): warning C4996: 'std::_Inner_product1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(90) : see declaration of 'std::_Inner_product1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(475) : see reference to function template instantiation '_Ty std::inner_product<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,double>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(490) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::negate<_Ty>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::negate<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(504) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::plus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::plus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(511) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(518) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(529) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::minus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::minus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(536) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(543) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(554) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::multiplies<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::multiplies<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(561) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(568) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(579) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::divides<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::divides<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(586) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(593) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(602) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::pointer_to_unary_function<_Arg,_Result,_Fn>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Arg=QuantLib::Real,
                     _Result=QuantLib::Real,
                     _Fn=QuantLib::Real (__cdecl *)(QuantLib::Real),
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(630) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::pointer_to_binary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real,QuantLib::Real)>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::pointer_to_binary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real,QuantLib::Real)>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(106): warning C4996: 'std::_Inner_product1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(90) : see declaration of 'std::_Inner_product1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrix.hpp(507) : see reference to function template instantiation '_Ty std::inner_product<QuantLib::Array::const_iterator,QuantLib::Matrix::const_column_iterator,double>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Matrix::const_column_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrix.hpp(545) : see reference to function template instantiation '_OutIt std::copy<QuantLib::Matrix::const_row_iterator,QuantLib::Matrix::column_iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Matrix::column_iterator,
                     _InIt=QuantLib::Matrix::const_row_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(348): warning C4996: 'std::_Uninitialized_copy0': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(333) : see declaration of 'std::_Uninitialized_copy0'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(94) : see reference to function template instantiation '_FwdIt std::uninitialized_copy<const unsigned int*,unsigned int*>(_InIt,_InIt,_FwdIt)' being compiled
                 with
                 [
                     _FwdIt=unsigned int *,
                     _InIt=const unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(89) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T>::unbounded_array(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=size_t
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2637) : see reference to class template instantiation 'boost::numeric::ublas::unbounded_array<T>' being compiled
                 with
                 [
                     T=size_t
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrixutilities/sparsematrix.hpp(53) : see reference to class template instantiation 'boost::numeric::ublas::compressed_matrix<T>' being compiled
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(348): warning C4996: 'std::_Uninitialized_copy0': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(333) : see declaration of 'std::_Uninitialized_copy0'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(94) : see reference to function template instantiation '_FwdIt std::uninitialized_copy<const double*,double*>(_InIt,_InIt,_FwdIt)' being compiled
                 with
                 [
                     _FwdIt=double *,
                     _InIt=const double *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(89) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T>::unbounded_array(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(3979) : see reference to class template instantiation 'boost::numeric::ublas::unbounded_array<T>' being compiled
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(126) : see reference to function template instantiation '_OutIt std::copy<std::_Vector_const_iterator<_Myvec>,QuantLib::Array::iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Myvec=std::_Vector_val<qreal,std::allocator<qreal>>,
                     _InIt=std::_Vector_const_iterator<std::_Vector_val<qreal,std::allocator<qreal>>>
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(124) : while compiling class template member function 'void QuantLib::FdmNdimSolver<N>::performCalculations(void) const'
                 with
                 [
                     N=1
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(181) : see reference to class template instantiation 'QuantLib::FdmNdimSolver<N>' being compiled
                 with
                 [
                     N=1
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/sampledcurve.hpp(108) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,T>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     T=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/math/sampledcurve.hpp(92) : see reference to function template instantiation 'void QuantLib::SampledCurve::regrid<std::pointer_to_unary_function<_Arg,_Result,_Fn>>(const QuantLib::Array &,T)' being compiled
                 with
                 [
                     _Arg=QuantLib::Real,
                     _Result=QuantLib::Real,
                     _Fn=QuantLib::Real (__cdecl *)(QuantLib::Real),
                     T=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(204) : see reference to function template instantiation '_OutIt std::copy<unsigned int*,unsigned int*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=unsigned int *,
                     _InIt=unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(201) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T> &boost::numeric::ublas::unbounded_array<T>::operator =(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=size_t
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(204) : see reference to function template instantiation '_OutIt std::copy<double*,double*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=double *,
                     _InIt=double *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(201) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T> &boost::numeric::ublas::unbounded_array<T>::operator =(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2515): warning C4996: 'std::_Copy_backward': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2500) : see declaration of 'std::_Copy_backward'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2906) : see reference to function template instantiation '_BidIt2 std::copy_backward<unsigned int*,unsigned int*>(_BidIt1,_BidIt1,_BidIt2)' being compiled
                 with
                 [
                     _BidIt2=unsigned int *,
                     _BidIt1=unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2887) : while compiling class template member function 'double &boost::numeric::ublas::compressed_matrix<T>::insert_element(unsigned int,unsigned int,const double &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2515): warning C4996: 'std::_Copy_backward': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2500) : see declaration of 'std::_Copy_backward'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2909) : see reference to function template instantiation '_BidIt2 std::copy_backward<double*,double*>(_BidIt1,_BidIt1,_BidIt2)' being compiled
                 with
                 [
                     _BidIt2=double *,
                     _BidIt1=double *
                 ]
         OptionFeeds.cpp
         QueSilo.cpp
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(229) : see reference to function template instantiation '_OutIt std::copy<QuantLib::Array::const_iterator,QuantLib::Array::iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _InIt=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(3063): warning C4996: 'std::_Equal1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(3048) : see declaration of 'std::_Equal1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(290) : see reference to function template instantiation 'bool std::equal<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator>(_InIt1,_InIt1,_InIt2)' being compiled
                 with
                 [
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(307) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::plus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::plus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(314) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(323) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::minus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::minus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(329) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(338) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::multiplies<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::multiplies<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(344) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(353) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::divides<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::divides<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(359) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(106): warning C4996: 'std::_Inner_product1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(90) : see declaration of 'std::_Inner_product1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(475) : see reference to function template instantiation '_Ty std::inner_product<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,double>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(490) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::negate<_Ty>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::negate<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(504) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::plus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::plus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(511) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(518) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(529) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::minus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::minus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(536) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(543) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(554) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::multiplies<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::multiplies<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(561) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(568) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(579) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::divides<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::divides<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(586) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(593) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(602) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::pointer_to_unary_function<_Arg,_Result,_Fn>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Arg=QuantLib::Real,
                     _Result=QuantLib::Real,
                     _Fn=QuantLib::Real (__cdecl *)(QuantLib::Real),
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(630) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::pointer_to_binary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real,QuantLib::Real)>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::pointer_to_binary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real,QuantLib::Real)>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(106): warning C4996: 'std::_Inner_product1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(90) : see declaration of 'std::_Inner_product1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrix.hpp(507) : see reference to function template instantiation '_Ty std::inner_product<QuantLib::Array::const_iterator,QuantLib::Matrix::const_column_iterator,double>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Matrix::const_column_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrix.hpp(545) : see reference to function template instantiation '_OutIt std::copy<QuantLib::Matrix::const_row_iterator,QuantLib::Matrix::column_iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Matrix::column_iterator,
                     _InIt=QuantLib::Matrix::const_row_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(348): warning C4996: 'std::_Uninitialized_copy0': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(333) : see declaration of 'std::_Uninitialized_copy0'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(94) : see reference to function template instantiation '_FwdIt std::uninitialized_copy<const unsigned int*,unsigned int*>(_InIt,_InIt,_FwdIt)' being compiled
                 with
                 [
                     _FwdIt=unsigned int *,
                     _InIt=const unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(89) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T>::unbounded_array(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=size_t
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2637) : see reference to class template instantiation 'boost::numeric::ublas::unbounded_array<T>' being compiled
                 with
                 [
                     T=size_t
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrixutilities/sparsematrix.hpp(53) : see reference to class template instantiation 'boost::numeric::ublas::compressed_matrix<T>' being compiled
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(348): warning C4996: 'std::_Uninitialized_copy0': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(333) : see declaration of 'std::_Uninitialized_copy0'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(94) : see reference to function template instantiation '_FwdIt std::uninitialized_copy<const double*,double*>(_InIt,_InIt,_FwdIt)' being compiled
                 with
                 [
                     _FwdIt=double *,
                     _InIt=const double *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(89) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T>::unbounded_array(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(3979) : see reference to class template instantiation 'boost::numeric::ublas::unbounded_array<T>' being compiled
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(126) : see reference to function template instantiation '_OutIt std::copy<std::_Vector_const_iterator<_Myvec>,QuantLib::Array::iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Myvec=std::_Vector_val<QuantLib::Time,std::allocator<QuantLib::Time>>,
                     _InIt=std::_Vector_const_iterator<std::_Vector_val<QuantLib::Time,std::allocator<QuantLib::Time>>>
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(124) : while compiling class template member function 'void QuantLib::FdmNdimSolver<N>::performCalculations(void) const'
                 with
                 [
                     N=1
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(181) : see reference to class template instantiation 'QuantLib::FdmNdimSolver<N>' being compiled
                 with
                 [
                     N=1
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/sampledcurve.hpp(108) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,T>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     T=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/math/sampledcurve.hpp(92) : see reference to function template instantiation 'void QuantLib::SampledCurve::regrid<std::pointer_to_unary_function<_Arg,_Result,_Fn>>(const QuantLib::Array &,T)' being compiled
                 with
                 [
                     _Arg=QuantLib::Real,
                     _Result=QuantLib::Real,
                     _Fn=QuantLib::Real (__cdecl *)(QuantLib::Real),
                     T=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(204) : see reference to function template instantiation '_OutIt std::copy<unsigned int*,unsigned int*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=unsigned int *,
                     _InIt=unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(201) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T> &boost::numeric::ublas::unbounded_array<T>::operator =(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=size_t
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(204) : see reference to function template instantiation '_OutIt std::copy<double*,double*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=double *,
                     _InIt=double *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(201) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T> &boost::numeric::ublas::unbounded_array<T>::operator =(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2515): warning C4996: 'std::_Copy_backward': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2500) : see declaration of 'std::_Copy_backward'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2906) : see reference to function template instantiation '_BidIt2 std::copy_backward<unsigned int*,unsigned int*>(_BidIt1,_BidIt1,_BidIt2)' being compiled
                 with
                 [
                     _BidIt2=unsigned int *,
                     _BidIt1=unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2887) : while compiling class template member function 'double &boost::numeric::ublas::compressed_matrix<T>::insert_element(unsigned int,unsigned int,const double &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2515): warning C4996: 'std::_Copy_backward': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2500) : see declaration of 'std::_Copy_backward'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2909) : see reference to function template instantiation '_BidIt2 std::copy_backward<double*,double*>(_BidIt1,_BidIt1,_BidIt2)' being compiled
                 with
                 [
                     _BidIt2=double *,
                     _BidIt1=double *
                 ]
         TDisplay.cpp
         TickStorage.cpp
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(229) : see reference to function template instantiation '_OutIt std::copy<QuantLib::Array::const_iterator,QuantLib::Array::iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _InIt=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(3063): warning C4996: 'std::_Equal1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(3048) : see declaration of 'std::_Equal1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(290) : see reference to function template instantiation 'bool std::equal<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator>(_InIt1,_InIt1,_InIt2)' being compiled
                 with
                 [
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(307) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::plus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::plus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(314) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(323) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::minus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::minus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(329) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(338) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::multiplies<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::multiplies<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(344) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(353) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::divides<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::divides<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(359) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(106): warning C4996: 'std::_Inner_product1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(90) : see declaration of 'std::_Inner_product1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(475) : see reference to function template instantiation '_Ty std::inner_product<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,double>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(490) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::negate<_Ty>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::negate<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(504) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::plus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::plus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(511) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(518) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(529) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::minus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::minus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(536) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(543) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(554) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::multiplies<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::multiplies<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(561) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(568) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(579) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::divides<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::divides<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(586) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(593) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(602) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::pointer_to_unary_function<_Arg,_Result,_Fn>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Arg=QuantLib::Real,
                     _Result=QuantLib::Real,
                     _Fn=QuantLib::Real (__cdecl *)(QuantLib::Real),
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(630) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::pointer_to_binary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real,QuantLib::Real)>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::pointer_to_binary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real,QuantLib::Real)>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(106): warning C4996: 'std::_Inner_product1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(90) : see declaration of 'std::_Inner_product1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrix.hpp(507) : see reference to function template instantiation '_Ty std::inner_product<QuantLib::Array::const_iterator,QuantLib::Matrix::const_column_iterator,double>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Matrix::const_column_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrix.hpp(545) : see reference to function template instantiation '_OutIt std::copy<QuantLib::Matrix::const_row_iterator,QuantLib::Matrix::column_iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Matrix::column_iterator,
                     _InIt=QuantLib::Matrix::const_row_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(348): warning C4996: 'std::_Uninitialized_copy0': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(333) : see declaration of 'std::_Uninitialized_copy0'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(94) : see reference to function template instantiation '_FwdIt std::uninitialized_copy<const unsigned int*,unsigned int*>(_InIt,_InIt,_FwdIt)' being compiled
                 with
                 [
                     _FwdIt=unsigned int *,
                     _InIt=const unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(89) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T>::unbounded_array(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=size_t
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2637) : see reference to class template instantiation 'boost::numeric::ublas::unbounded_array<T>' being compiled
                 with
                 [
                     T=size_t
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrixutilities/sparsematrix.hpp(53) : see reference to class template instantiation 'boost::numeric::ublas::compressed_matrix<T>' being compiled
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(348): warning C4996: 'std::_Uninitialized_copy0': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(333) : see declaration of 'std::_Uninitialized_copy0'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(94) : see reference to function template instantiation '_FwdIt std::uninitialized_copy<const double*,double*>(_InIt,_InIt,_FwdIt)' being compiled
                 with
                 [
                     _FwdIt=double *,
                     _InIt=const double *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(89) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T>::unbounded_array(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(3979) : see reference to class template instantiation 'boost::numeric::ublas::unbounded_array<T>' being compiled
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(126) : see reference to function template instantiation '_OutIt std::copy<std::_Vector_const_iterator<_Myvec>,QuantLib::Array::iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Myvec=std::_Vector_val<QuantLib::Time,std::allocator<QuantLib::Time>>,
                     _InIt=std::_Vector_const_iterator<std::_Vector_val<QuantLib::Time,std::allocator<QuantLib::Time>>>
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(124) : while compiling class template member function 'void QuantLib::FdmNdimSolver<N>::performCalculations(void) const'
                 with
                 [
                     N=1
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(181) : see reference to class template instantiation 'QuantLib::FdmNdimSolver<N>' being compiled
                 with
                 [
                     N=1
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/sampledcurve.hpp(108) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,T>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     T=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/math/sampledcurve.hpp(92) : see reference to function template instantiation 'void QuantLib::SampledCurve::regrid<std::pointer_to_unary_function<_Arg,_Result,_Fn>>(const QuantLib::Array &,T)' being compiled
                 with
                 [
                     _Arg=QuantLib::Real,
                     _Result=QuantLib::Real,
                     _Fn=QuantLib::Real (__cdecl *)(QuantLib::Real),
                     T=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(204) : see reference to function template instantiation '_OutIt std::copy<unsigned int*,unsigned int*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=unsigned int *,
                     _InIt=unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(201) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T> &boost::numeric::ublas::unbounded_array<T>::operator =(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=size_t
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(204) : see reference to function template instantiation '_OutIt std::copy<double*,double*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=double *,
                     _InIt=double *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(201) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T> &boost::numeric::ublas::unbounded_array<T>::operator =(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2515): warning C4996: 'std::_Copy_backward': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2500) : see declaration of 'std::_Copy_backward'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2906) : see reference to function template instantiation '_BidIt2 std::copy_backward<unsigned int*,unsigned int*>(_BidIt1,_BidIt1,_BidIt2)' being compiled
                 with
                 [
                     _BidIt2=unsigned int *,
                     _BidIt1=unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2887) : while compiling class template member function 'double &boost::numeric::ublas::compressed_matrix<T>::insert_element(unsigned int,unsigned int,const double &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2515): warning C4996: 'std::_Copy_backward': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2500) : see declaration of 'std::_Copy_backward'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2909) : see reference to function template instantiation '_BidIt2 std::copy_backward<double*,double*>(_BidIt1,_BidIt1,_BidIt2)' being compiled
                 with
                 [
                     _BidIt2=double *,
                     _BidIt1=double *
                 ]
         UpdateFeeds.cpp
     1>UpdateFeeds.cpp(153): warning C4482: nonstandard extension used: enum 'Qt::CheckState' used in qualified name
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(229) : see reference to function template instantiation '_OutIt std::copy<QuantLib::Array::const_iterator,QuantLib::Array::iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _InIt=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(3063): warning C4996: 'std::_Equal1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(3048) : see declaration of 'std::_Equal1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(290) : see reference to function template instantiation 'bool std::equal<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator>(_InIt1,_InIt1,_InIt2)' being compiled
                 with
                 [
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(307) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::plus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::plus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(314) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(323) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::minus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::minus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(329) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(338) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::multiplies<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::multiplies<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(344) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(353) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::divides<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::divides<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(359) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(106): warning C4996: 'std::_Inner_product1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(90) : see declaration of 'std::_Inner_product1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(475) : see reference to function template instantiation '_Ty std::inner_product<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,double>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(490) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::negate<_Ty>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::negate<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(504) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::plus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::plus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(511) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(518) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(529) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::minus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::minus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(536) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(543) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(554) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::multiplies<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::multiplies<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(561) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(568) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(579) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::divides<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::divides<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(586) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(593) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(602) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::pointer_to_unary_function<_Arg,_Result,_Fn>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Arg=QuantLib::Real,
                     _Result=QuantLib::Real,
                     _Fn=QuantLib::Real (__cdecl *)(QuantLib::Real),
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(630) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::pointer_to_binary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real,QuantLib::Real)>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::pointer_to_binary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real,QuantLib::Real)>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(106): warning C4996: 'std::_Inner_product1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(90) : see declaration of 'std::_Inner_product1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrix.hpp(507) : see reference to function template instantiation '_Ty std::inner_product<QuantLib::Array::const_iterator,QuantLib::Matrix::const_column_iterator,double>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Matrix::const_column_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrix.hpp(545) : see reference to function template instantiation '_OutIt std::copy<QuantLib::Matrix::const_row_iterator,QuantLib::Matrix::column_iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Matrix::column_iterator,
                     _InIt=QuantLib::Matrix::const_row_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(348): warning C4996: 'std::_Uninitialized_copy0': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(333) : see declaration of 'std::_Uninitialized_copy0'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(94) : see reference to function template instantiation '_FwdIt std::uninitialized_copy<const unsigned int*,unsigned int*>(_InIt,_InIt,_FwdIt)' being compiled
                 with
                 [
                     _FwdIt=unsigned int *,
                     _InIt=const unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(89) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T>::unbounded_array(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=size_t
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2637) : see reference to class template instantiation 'boost::numeric::ublas::unbounded_array<T>' being compiled
                 with
                 [
                     T=size_t
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrixutilities/sparsematrix.hpp(53) : see reference to class template instantiation 'boost::numeric::ublas::compressed_matrix<T>' being compiled
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(348): warning C4996: 'std::_Uninitialized_copy0': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(333) : see declaration of 'std::_Uninitialized_copy0'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(94) : see reference to function template instantiation '_FwdIt std::uninitialized_copy<const double*,double*>(_InIt,_InIt,_FwdIt)' being compiled
                 with
                 [
                     _FwdIt=double *,
                     _InIt=const double *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(89) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T>::unbounded_array(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(3979) : see reference to class template instantiation 'boost::numeric::ublas::unbounded_array<T>' being compiled
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(126) : see reference to function template instantiation '_OutIt std::copy<std::_Vector_const_iterator<_Myvec>,QuantLib::Array::iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Myvec=std::_Vector_val<QuantLib::Time,std::allocator<QuantLib::Time>>,
                     _InIt=std::_Vector_const_iterator<std::_Vector_val<QuantLib::Time,std::allocator<QuantLib::Time>>>
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(124) : while compiling class template member function 'void QuantLib::FdmNdimSolver<N>::performCalculations(void) const'
                 with
                 [
                     N=1
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(181) : see reference to class template instantiation 'QuantLib::FdmNdimSolver<N>' being compiled
                 with
                 [
                     N=1
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/sampledcurve.hpp(108) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,T>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     T=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/math/sampledcurve.hpp(92) : see reference to function template instantiation 'void QuantLib::SampledCurve::regrid<std::pointer_to_unary_function<_Arg,_Result,_Fn>>(const QuantLib::Array &,T)' being compiled
                 with
                 [
                     _Arg=QuantLib::Real,
                     _Result=QuantLib::Real,
                     _Fn=QuantLib::Real (__cdecl *)(QuantLib::Real),
                     T=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(204) : see reference to function template instantiation '_OutIt std::copy<unsigned int*,unsigned int*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=unsigned int *,
                     _InIt=unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(201) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T> &boost::numeric::ublas::unbounded_array<T>::operator =(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=size_t
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(204) : see reference to function template instantiation '_OutIt std::copy<double*,double*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=double *,
                     _InIt=double *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(201) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T> &boost::numeric::ublas::unbounded_array<T>::operator =(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2515): warning C4996: 'std::_Copy_backward': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2500) : see declaration of 'std::_Copy_backward'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2906) : see reference to function template instantiation '_BidIt2 std::copy_backward<unsigned int*,unsigned int*>(_BidIt1,_BidIt1,_BidIt2)' being compiled
                 with
                 [
                     _BidIt2=unsigned int *,
                     _BidIt1=unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2887) : while compiling class template member function 'double &boost::numeric::ublas::compressed_matrix<T>::insert_element(unsigned int,unsigned int,const double &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2515): warning C4996: 'std::_Copy_backward': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2500) : see declaration of 'std::_Copy_backward'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2909) : see reference to function template instantiation '_BidIt2 std::copy_backward<double*,double*>(_BidIt1,_BidIt1,_BidIt2)' being compiled
                 with
                 [
                     _BidIt2=double *,
                     _BidIt1=double *
                 ]
         Wopr.cpp
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1010): warning C4996: 'std::_Swap_ranges': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(995) : see declaration of 'std::_Swap_ranges'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/uuid/uuid.hpp(151) : see reference to function template instantiation '_FwdIt2 std::swap_ranges<boost::uuids::uuid::iterator,boost::uuids::uuid::iterator>(_FwdIt1,_FwdIt1,_FwdIt2)' being compiled
                 with
                 [
                     _FwdIt2=boost::uuids::uuid::iterator,
                     _FwdIt1=boost::uuids::uuid::iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(3063): warning C4996: 'std::_Equal1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(3048) : see declaration of 'std::_Equal1'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/uuid/uuid.hpp(161) : see reference to function template instantiation 'bool std::equal<boost::uuids::uuid::const_iterator,boost::uuids::uuid::const_iterator>(_InIt1,_InIt1,_InIt2)' being compiled
                 with
                 [
                     _InIt1=boost::uuids::uuid::const_iterator,
                     _InIt2=boost::uuids::uuid::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(229) : see reference to function template instantiation '_OutIt std::copy<QuantLib::Array::const_iterator,QuantLib::Array::iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _InIt=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(3063): warning C4996: 'std::_Equal1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(3048) : see declaration of 'std::_Equal1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(290) : see reference to function template instantiation 'bool std::equal<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator>(_InIt1,_InIt1,_InIt2)' being compiled
                 with
                 [
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(307) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::plus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::plus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(314) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(323) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::minus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::minus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(329) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(338) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::multiplies<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::multiplies<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(344) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(353) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::divides<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::divides<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(359) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::binder2nd<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(106): warning C4996: 'std::_Inner_product1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(90) : see declaration of 'std::_Inner_product1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(475) : see reference to function template instantiation '_Ty std::inner_product<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,double>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(490) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::negate<_Ty>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::negate<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(504) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::plus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::plus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(511) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(518) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::plus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::plus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(529) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::minus<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::minus<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(536) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(543) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::minus<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::minus<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(554) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::multiplies<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::multiplies<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(561) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(568) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::multiplies<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::multiplies<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1258): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1237) : see declaration of 'std::_Transform2'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(579) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::divides<_Ty>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Ty=QuantLib::Real,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Array::const_iterator,
                     _Fn2=std::divides<QuantLib::Real>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(586) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(593) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder1st<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::divides<QuantLib::Real>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder1st<std::divides<QuantLib::Real>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(602) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::pointer_to_unary_function<_Arg,_Result,_Fn>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Arg=QuantLib::Real,
                     _Result=QuantLib::Real,
                     _Fn=QuantLib::Real (__cdecl *)(QuantLib::Real),
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/array.hpp(630) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::const_iterator,QuantLib::Array::iterator,std::binder2nd<_Fn2>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Fn2=std::pointer_to_binary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real,QuantLib::Real)>,
                     _InIt=QuantLib::Array::const_iterator,
                     _Fn1=std::binder2nd<std::pointer_to_binary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real,QuantLib::Real)>>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(106): warning C4996: 'std::_Inner_product1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\numeric(90) : see declaration of 'std::_Inner_product1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrix.hpp(507) : see reference to function template instantiation '_Ty std::inner_product<QuantLib::Array::const_iterator,QuantLib::Matrix::const_column_iterator,double>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=QuantLib::Array::const_iterator,
                     _InIt2=QuantLib::Matrix::const_column_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrix.hpp(545) : see reference to function template instantiation '_OutIt std::copy<QuantLib::Matrix::const_row_iterator,QuantLib::Matrix::column_iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Matrix::column_iterator,
                     _InIt=QuantLib::Matrix::const_row_iterator
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(348): warning C4996: 'std::_Uninitialized_copy0': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(333) : see declaration of 'std::_Uninitialized_copy0'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(94) : see reference to function template instantiation '_FwdIt std::uninitialized_copy<const unsigned int*,unsigned int*>(_InIt,_InIt,_FwdIt)' being compiled
                 with
                 [
                     _FwdIt=unsigned int *,
                     _InIt=const unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(89) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T>::unbounded_array(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=size_t
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2637) : see reference to class template instantiation 'boost::numeric::ublas::unbounded_array<T>' being compiled
                 with
                 [
                     T=size_t
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/math/matrixutilities/sparsematrix.hpp(53) : see reference to class template instantiation 'boost::numeric::ublas::compressed_matrix<T>' being compiled
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(348): warning C4996: 'std::_Uninitialized_copy0': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\memory(333) : see declaration of 'std::_Uninitialized_copy0'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(94) : see reference to function template instantiation '_FwdIt std::uninitialized_copy<const double*,double*>(_InIt,_InIt,_FwdIt)' being compiled
                 with
                 [
                     _FwdIt=double *,
                     _InIt=const double *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(89) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T>::unbounded_array(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(3979) : see reference to class template instantiation 'boost::numeric::ublas::unbounded_array<T>' being compiled
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(126) : see reference to function template instantiation '_OutIt std::copy<std::_Vector_const_iterator<_Myvec>,QuantLib::Array::iterator>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     _Myvec=std::_Vector_val<qreal,std::allocator<qreal>>,
                     _InIt=std::_Vector_const_iterator<std::_Vector_val<qreal,std::allocator<qreal>>>
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(124) : while compiling class template member function 'void QuantLib::FdmNdimSolver<N>::performCalculations(void) const'
                 with
                 [
                     N=1
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/methods/finitedifferences/solvers/fdmndimsolver.hpp(181) : see reference to class template instantiation 'QuantLib::FdmNdimSolver<N>' being compiled
                 with
                 [
                     N=1
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1119): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\algorithm(1100) : see declaration of 'std::_Transform1'
                 C:\rsquared\External\QuantLib-1.3\ql/math/sampledcurve.hpp(108) : see reference to function template instantiation '_OutIt std::transform<QuantLib::Array::iterator,QuantLib::Array::iterator,T>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=QuantLib::Array::iterator,
                     T=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>,
                     _InIt=QuantLib::Array::iterator,
                     _Fn1=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
                 C:\rsquared\External\QuantLib-1.3\ql/math/sampledcurve.hpp(92) : see reference to function template instantiation 'void QuantLib::SampledCurve::regrid<std::pointer_to_unary_function<_Arg,_Result,_Fn>>(const QuantLib::Array &,T)' being compiled
                 with
                 [
                     _Arg=QuantLib::Real,
                     _Result=QuantLib::Real,
                     _Fn=QuantLib::Real (__cdecl *)(QuantLib::Real),
                     T=std::pointer_to_unary_function<QuantLib::Real,QuantLib::Real,QuantLib::Real (__cdecl *)(QuantLib::Real)>
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/algorithm/string/detail/classification.hpp(102) : see reference to function template instantiation '_OutIt std::copy<const char*,char*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=char *,
                     _InIt=const char *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/algorithm/string/classification.hpp(206) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<CharT>::is_any_ofF<boost::iterator_range<IteratorT>>(const RangeT &)' being compiled
                 with
                 [
                     CharT=char,
                     IteratorT=const char *,
                     RangeT=boost::iterator_range<const char *>
                 ]
                 Wopr.cpp(65) : see reference to function template instantiation 'boost::algorithm::detail::is_any_ofF<CharT> boost::algorithm::is_any_of<const char[4]>(RangeT (&))' being compiled
                 with
                 [
                     CharT=char,
                     RangeT=const char [4]
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(204) : see reference to function template instantiation '_OutIt std::copy<unsigned int*,unsigned int*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=unsigned int *,
                     _InIt=unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(201) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T> &boost::numeric::ublas::unbounded_array<T>::operator =(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=size_t
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2239): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2224) : see declaration of 'std::_Copy_impl'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(204) : see reference to function template instantiation '_OutIt std::copy<double*,double*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=double *,
                     _InIt=double *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/storage.hpp(201) : while compiling class template member function 'boost::numeric::ublas::unbounded_array<T> &boost::numeric::ublas::unbounded_array<T>::operator =(const boost::numeric::ublas::unbounded_array<T> &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2515): warning C4996: 'std::_Copy_backward': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2500) : see declaration of 'std::_Copy_backward'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2906) : see reference to function template instantiation '_BidIt2 std::copy_backward<unsigned int*,unsigned int*>(_BidIt1,_BidIt1,_BidIt2)' being compiled
                 with
                 [
                     _BidIt2=unsigned int *,
                     _BidIt1=unsigned int *
                 ]
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2887) : while compiling class template member function 'double &boost::numeric::ublas::compressed_matrix<T>::insert_element(unsigned int,unsigned int,const double &)'
                 with
                 [
                     T=QuantLib::Real
                 ]
     1>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2515): warning C4996: 'std::_Copy_backward': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\xutility(2500) : see declaration of 'std::_Copy_backward'
                 C:\rsquared\External\boost-win-1.47-32bit-vs2010\include\boost-1_47\boost/numeric/ublas/matrix_sparse.hpp(2909) : see reference to function template instantiation '_BidIt2 std::copy_backward<double*,double*>(_BidIt1,_BidIt1,_BidIt2)' being compiled
                 with
                 [
                     _BidIt2=double *,
                     _BidIt1=double *
                 ]
         main.cpp
         Generating Code...
     1>c:\rsquared\framework\wopr\tickstorage.cpp(47): warning C4715: 'Framework::WOPR::TickStorage::Retrieve_Option' : not all control paths return a value
     1>c:\rsquared\framework\wopr\tickstorage.cpp(75): warning C4715: 'Framework::WOPR::TickStorage::SearchTickStoresForOption' : not all control paths return a value
     1>c:\rsquared\framework\wopr\mysql-wopr.cpp(324): warning C4715: 'Framework::WOPR::DBaseConnection::RetrieveOptionCallPut' : not all control paths return a value
         c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\CL.exe /c /I.\GeneratedFiles /I. /IC:\Qt\4.8.4\include /I.\GeneratedFiles\Debug /IC:\Qt\4.8.4\include\QtCore /IC:\Qt\4.8.4\include\QtGui /IC:\Qt\4.8.4\include\QtNetwork /I"..\..\External\boost-win-1.47-32bit-vs2010\include\boost-1_47" /I"..\..\External\ta-lib-0.4.0-msvc\ta-lib\c\include\\" /I"..\..\External\Qpid-32Bit\Debug\include\\" /I"..\..\External\log4cplus-1.1.2-rc1\include" /I"..\..\External\protoc-2.5.0-win32\protobuf-2.5.0-src\src\\" /I"..\..\External\MySQLBuild-32Bit\Include" /I"..\..\External\QuantLib-1.3\\" /Zi /nologo /W1 /WX- /Od /Oy- /D WIN32 /D QT_LARGEFILE_SUPPORT /D QT_DLL /D QT_CORE_LIB /D QT_GUI_LIB /D _WIN32_WINNT=0x0501 /D PROTOBUF_USE_DLLS /D QT_NETWORK_LIB /Gm- /EHsc /MDd /GS /fp:precise /Zc:wchar_t- /Zc:forScope /openmp /Fo"Debug\\" /Fd"Debug\vc100.pdb" /Gd /TP /analyze- /errorReport:prompt GeneratedFiles\qrc_Wopr.cpp
         qrc_Wopr.cpp
       ResourceCompile:
         All outputs are up-to-date.
       Link:
         c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\link.exe /ERRORREPORT:PROMPT /OUT:"C:\rsquared\Framework\Win32\Debug\\WOPR.exe" /NOLOGO /LIBPATH:C:\Qt\4.8.4\lib /LIBPATH:"..\..\External\boost-win-1.47-32bit-vs2010\lib\\" /LIBPATH:"..\..\External\ta-lib-0.4.0-msvc\ta-lib\c\lib\\" /LIBPATH:"..\..\External\Qpid-32Bit\Debug\lib\\" /LIBPATH:"..\..\External\log4cplus-1.1.2-rc1\msvc10\Win32\bin.Debug\\" /LIBPATH:"..\..\External\protoc-2.5.0-win32\protobuf-2.5.0-src\vsprojects\Debug\\" /LIBPATH:"..\..\External\MySQLBuild-32Bit\Lib\Debug" /LIBPATH:"..\..\External\QuantLib-1.3\lib\\" log4cplusd.lib qtmaind.lib QtCored4.lib QtGuid4.lib ta_libc_cdd.lib qpidmessagingd.lib qpidclientd.lib qpidcommond.lib qpidtypesd.lib libprotobuf.lib libmysql.lib mysqlcppconn.lib QtNetworkd4.lib kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /ManifestFile:"Debug\WOPR.exe.intermediate.manifest" /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /DEBUG /PDB:"C:\rsquared\Framework\Win32\Debug\WOPR.pdb" /SUBSYSTEM:WINDOWS /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"C:\rsquared\Framework\Win32\Debug\WOPR.lib" /MACHINE:X86 Debug\WOPR.res
         Debug\AddOptionSymbol.obj
         Debug\FeedConnector.obj
         Debug\FeedProcessor.obj
         Debug\moc_AddOptionSymbol.obj
         Debug\moc_FeedConnector.obj
         Debug\moc_FeedProcessor.obj
         Debug\moc_Network.obj
         Debug\moc_OptionFeeds.obj
         Debug\moc_OptionIndicator.obj
         Debug\moc_QueSilo.obj
         Debug\moc_TDisplay.obj
         Debug\moc_UpdateFeeds.obj
         Debug\moc_Wopr.obj
         Debug\qrc_Wopr.obj
         Debug\main.obj
         "Debug\MySQL-WOPR.obj"
         Debug\Network.obj
         Debug\OptionFeeds.obj
         Debug\OptionIndicator.obj
         Debug\OptionProperties.obj
         Debug\OptionTick.pb.obj
         Debug\QueSilo.obj
         Debug\StockTick.pb.obj
         Debug\TDisplay.obj
         Debug\tick.pb.obj
         Debug\TickStorage.obj
         Debug\UpdateFeeds.obj
         Debug\Wopr.obj
         LINK : C:\rsquared\Framework\Win32\Debug\\WOPR.exe not found or not built by the last incremental link; performing full link
     1>FeedConnector.obj : warning LNK4049: locally defined symbol ?kEmptyString@internal@protobuf@google@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B (class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const google::protobuf::internal::kEmptyString) imported
     1>OptionTick.pb.obj : warning LNK4049: locally defined symbol ?kEmptyString@internal@protobuf@google@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B (class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const google::protobuf::internal::kEmptyString) imported
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?kEmptyString@internal@protobuf@google@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B (class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const google::protobuf::internal::kEmptyString) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?kEmptyString@internal@protobuf@google@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B (class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const google::protobuf::internal::kEmptyString) imported
     1>Network.obj : warning LNK4217: locally defined symbol ?SerializeAsString@MessageLite@protobuf@google@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ (public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > __thiscall google::protobuf::MessageLite::SerializeAsString(void)const ) imported in function "public: void __thiscall Framework::WOPR::QpidConnector::Dispatach_Options(class Serializable::OptionTick_ser &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >)" (?Dispatach_Options@QpidConnector@WOPR@Framework@@QAEXAAVOptionTick_ser@Serializable@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z)
     1>TickStorage.obj : warning LNK4049: locally defined symbol ?SerializeAsString@MessageLite@protobuf@google@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ (public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > __thiscall google::protobuf::MessageLite::SerializeAsString(void)const ) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ??0GeneratedMessageReflection@internal@protobuf@google@@QAE@PBVDescriptor@23@PBVMessage@23@QBHHHHPBVDescriptorPool@23@PAVMessageFactory@23@H@Z (public: __thiscall google::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(class google::protobuf::Descriptor const *,class google::protobuf::Message const *,int const * const,int,int,int,class google::protobuf::DescriptorPool const *,class google::protobuf::MessageFactory *,int)) imported in function "void __cdecl Serializable::protobuf_AssignDesc_OptionTick_2eproto(void)" (?protobuf_AssignDesc_OptionTick_2eproto@Serializable@@YAXXZ)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ??0GeneratedMessageReflection@internal@protobuf@google@@QAE@PBVDescriptor@23@PBVMessage@23@QBHHHHPBVDescriptorPool@23@PAVMessageFactory@23@H@Z (public: __thiscall google::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(class google::protobuf::Descriptor const *,class google::protobuf::Message const *,int const *const,int,int,int,class google::protobuf::DescriptorPool const *,class google::protobuf::MessageFactory *,int)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ??0GeneratedMessageReflection@internal@protobuf@google@@QAE@PBVDescriptor@23@PBVMessage@23@QBHHHHPBVDescriptorPool@23@PAVMessageFactory@23@H@Z (public: __thiscall google::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(class google::protobuf::Descriptor const *,class google::protobuf::Message const *,int const * const,int,int,int,class google::protobuf::DescriptorPool const *,class google::protobuf::MessageFactory *,int)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?generated_factory@MessageFactory@protobuf@google@@SAPAV123@XZ (public: static class google::protobuf::MessageFactory * __cdecl google::protobuf::MessageFactory::generated_factory(void)) imported in function "void __cdecl Serializable::protobuf_AssignDesc_OptionTick_2eproto(void)" (?protobuf_AssignDesc_OptionTick_2eproto@Serializable@@YAXXZ)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?generated_factory@MessageFactory@protobuf@google@@SAPAV123@XZ (public: static class google::protobuf::MessageFactory * __cdecl google::protobuf::MessageFactory::generated_factory(void)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?generated_factory@MessageFactory@protobuf@google@@SAPAV123@XZ (public: static class google::protobuf::MessageFactory * __cdecl google::protobuf::MessageFactory::generated_factory(void)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?message_type@FileDescriptor@protobuf@google@@QBEPBVDescriptor@23@H@Z (public: class google::protobuf::Descriptor const * __thiscall google::protobuf::FileDescriptor::message_type(int)const ) imported in function "void __cdecl Serializable::protobuf_AssignDesc_OptionTick_2eproto(void)" (?protobuf_AssignDesc_OptionTick_2eproto@Serializable@@YAXXZ)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?message_type@FileDescriptor@protobuf@google@@QBEPBVDescriptor@23@H@Z (public: class google::protobuf::Descriptor const * __thiscall google::protobuf::FileDescriptor::message_type(int)const ) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?message_type@FileDescriptor@protobuf@google@@QBEPBVDescriptor@23@H@Z (public: class google::protobuf::Descriptor const * __thiscall google::protobuf::FileDescriptor::message_type(int)const ) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ??1LogMessage@internal@protobuf@google@@QAE@XZ (public: __thiscall google::protobuf::internal::LogMessage::~LogMessage(void)) imported in function "void __cdecl Serializable::protobuf_AssignDesc_OptionTick_2eproto(void)" (?protobuf_AssignDesc_OptionTick_2eproto@Serializable@@YAXXZ)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ??1LogMessage@internal@protobuf@google@@QAE@XZ (public: __thiscall google::protobuf::internal::LogMessage::~LogMessage(void)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ??1LogMessage@internal@protobuf@google@@QAE@XZ (public: __thiscall google::protobuf::internal::LogMessage::~LogMessage(void)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ??4LogFinisher@internal@protobuf@google@@QAEXAAVLogMessage@123@@Z (public: void __thiscall google::protobuf::internal::LogFinisher::operator=(class google::protobuf::internal::LogMessage &)) imported in function "void __cdecl Serializable::protobuf_AssignDesc_OptionTick_2eproto(void)" (?protobuf_AssignDesc_OptionTick_2eproto@Serializable@@YAXXZ)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ??4LogFinisher@internal@protobuf@google@@QAEXAAVLogMessage@123@@Z (public: void __thiscall google::protobuf::internal::LogFinisher::operator=(class google::protobuf::internal::LogMessage &)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ??4LogFinisher@internal@protobuf@google@@QAEXAAVLogMessage@123@@Z (public: void __thiscall google::protobuf::internal::LogFinisher::operator=(class google::protobuf::internal::LogMessage &)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ??6LogMessage@internal@protobuf@google@@QAEAAV0123@PBD@Z (public: class google::protobuf::internal::LogMessage & __thiscall google::protobuf::internal::LogMessage::operator<<(char const *)) imported in function "void __cdecl Serializable::protobuf_AssignDesc_OptionTick_2eproto(void)" (?protobuf_AssignDesc_OptionTick_2eproto@Serializable@@YAXXZ)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ??6LogMessage@internal@protobuf@google@@QAEAAV0123@PBD@Z (public: class google::protobuf::internal::LogMessage & __thiscall google::protobuf::internal::LogMessage::operator<<(char const *)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ??6LogMessage@internal@protobuf@google@@QAEAAV0123@PBD@Z (public: class google::protobuf::internal::LogMessage & __thiscall google::protobuf::internal::LogMessage::operator<<(char const *)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ??0LogMessage@internal@protobuf@google@@QAE@W4LogLevel@23@PBDH@Z (public: __thiscall google::protobuf::internal::LogMessage::LogMessage(enum google::protobuf::LogLevel,char const *,int)) imported in function "void __cdecl Serializable::protobuf_AssignDesc_OptionTick_2eproto(void)" (?protobuf_AssignDesc_OptionTick_2eproto@Serializable@@YAXXZ)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ??0LogMessage@internal@protobuf@google@@QAE@W4LogLevel@23@PBDH@Z (public: __thiscall google::protobuf::internal::LogMessage::LogMessage(enum google::protobuf::LogLevel,char const *,int)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ??0LogMessage@internal@protobuf@google@@QAE@W4LogLevel@23@PBDH@Z (public: __thiscall google::protobuf::internal::LogMessage::LogMessage(enum google::protobuf::LogLevel,char const *,int)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?FindFileByName@DescriptorPool@protobuf@google@@QBEPBVFileDescriptor@23@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z (public: class google::protobuf::FileDescriptor const * __thiscall google::protobuf::DescriptorPool::FindFileByName(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)const ) imported in function "void __cdecl Serializable::protobuf_AssignDesc_OptionTick_2eproto(void)" (?protobuf_AssignDesc_OptionTick_2eproto@Serializable@@YAXXZ)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?FindFileByName@DescriptorPool@protobuf@google@@QBEPBVFileDescriptor@23@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z (public: class google::protobuf::FileDescriptor const * __thiscall google::protobuf::DescriptorPool::FindFileByName(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char>> const &)const ) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?FindFileByName@DescriptorPool@protobuf@google@@QBEPBVFileDescriptor@23@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z (public: class google::protobuf::FileDescriptor const * __thiscall google::protobuf::DescriptorPool::FindFileByName(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)const ) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?generated_pool@DescriptorPool@protobuf@google@@SAPBV123@XZ (public: static class google::protobuf::DescriptorPool const * __cdecl google::protobuf::DescriptorPool::generated_pool(void)) imported in function "void __cdecl Serializable::protobuf_AssignDesc_OptionTick_2eproto(void)" (?protobuf_AssignDesc_OptionTick_2eproto@Serializable@@YAXXZ)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?generated_pool@DescriptorPool@protobuf@google@@SAPBV123@XZ (public: static class google::protobuf::DescriptorPool const * __cdecl google::protobuf::DescriptorPool::generated_pool(void)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?generated_pool@DescriptorPool@protobuf@google@@SAPBV123@XZ (public: static class google::protobuf::DescriptorPool const * __cdecl google::protobuf::DescriptorPool::generated_pool(void)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ??1GeneratedMessageReflection@internal@protobuf@google@@UAE@XZ (public: virtual __thiscall google::protobuf::internal::GeneratedMessageReflection::~GeneratedMessageReflection(void)) imported in function "public: virtual void * __thiscall google::protobuf::internal::GeneratedMessageReflection::`scalar deleting destructor'(unsigned int)" (??_GGeneratedMessageReflection@internal@protobuf@google@@UAEPAXI@Z)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ??1GeneratedMessageReflection@internal@protobuf@google@@UAE@XZ (public: virtual __thiscall google::protobuf::internal::GeneratedMessageReflection::~GeneratedMessageReflection(void)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ??1GeneratedMessageReflection@internal@protobuf@google@@UAE@XZ (public: virtual __thiscall google::protobuf::internal::GeneratedMessageReflection::~GeneratedMessageReflection(void)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?InternalRegisterGeneratedMessage@MessageFactory@protobuf@google@@SAXPBVDescriptor@23@PBVMessage@23@@Z (public: static void __cdecl google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(class google::protobuf::Descriptor const *,class google::protobuf::Message const *)) imported in function "void __cdecl Serializable::`anonymous namespace'::protobuf_RegisterTypes(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)" (?protobuf_RegisterTypes@?A0x23b59fee@Serializable@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?InternalRegisterGeneratedMessage@MessageFactory@protobuf@google@@SAXPBVDescriptor@23@PBVMessage@23@@Z (public: static void __cdecl google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(class google::protobuf::Descriptor const *,class google::protobuf::Message const *)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?InternalRegisterGeneratedMessage@MessageFactory@protobuf@google@@SAXPBVDescriptor@23@PBVMessage@23@@Z (public: static void __cdecl google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(class google::protobuf::Descriptor const *,class google::protobuf::Message const *)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ??1FunctionClosure0@internal@protobuf@google@@UAE@XZ (public: virtual __thiscall google::protobuf::internal::FunctionClosure0::~FunctionClosure0(void)) imported in function "void __cdecl google::protobuf::GoogleOnceInit(int *,void (__cdecl*)(void))" (?GoogleOnceInit@protobuf@google@@YAXPAHP6AXXZ@Z)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ??1FunctionClosure0@internal@protobuf@google@@UAE@XZ (public: virtual __thiscall google::protobuf::internal::FunctionClosure0::~FunctionClosure0(void)) imported
     1>tick.pb.obj : warning LNK4217: locally defined symbol ??1FunctionClosure0@internal@protobuf@google@@UAE@XZ (public: virtual __thiscall google::protobuf::internal::FunctionClosure0::~FunctionClosure0(void)) imported in function "public: virtual __thiscall Serializable::Tick_ser::~Tick_ser(void)" (??1Tick_ser@Serializable@@UAE@XZ)
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?GoogleOnceInitImpl@protobuf@google@@YAXPAHPAVClosure@12@@Z (void __cdecl google::protobuf::GoogleOnceInitImpl(int *,class google::protobuf::Closure *)) imported in function "void __cdecl google::protobuf::GoogleOnceInit(int *,void (__cdecl*)(void))" (?GoogleOnceInit@protobuf@google@@YAXPAHP6AXXZ@Z)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?GoogleOnceInitImpl@protobuf@google@@YAXPAHPAVClosure@12@@Z (void __cdecl google::protobuf::GoogleOnceInitImpl(int *,class google::protobuf::Closure *)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?GoogleOnceInitImpl@protobuf@google@@YAXPAHPAVClosure@12@@Z (void __cdecl google::protobuf::GoogleOnceInitImpl(int *,class google::protobuf::Closure *)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ??0FunctionClosure0@internal@protobuf@google@@QAE@P6AXXZ_N@Z (public: __thiscall google::protobuf::internal::FunctionClosure0::FunctionClosure0(void (__cdecl*)(void),bool)) imported in function "void __cdecl google::protobuf::GoogleOnceInit(int *,void (__cdecl*)(void))" (?GoogleOnceInit@protobuf@google@@YAXPAHP6AXXZ@Z)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ??0FunctionClosure0@internal@protobuf@google@@QAE@P6AXXZ_N@Z (public: __thiscall google::protobuf::internal::FunctionClosure0::FunctionClosure0(void (__cdecl*)(void),bool)) imported
     1>tick.pb.obj : warning LNK4217: locally defined symbol ??0FunctionClosure0@internal@protobuf@google@@QAE@P6AXXZ_N@Z (public: __thiscall google::protobuf::internal::FunctionClosure0::FunctionClosure0(void (__cdecl*)(void),bool)) imported in function "public: __thiscall Serializable::Tick_ser::Tick_ser(void)" (??0Tick_ser@Serializable@@QAE@XZ)
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?OnShutdown@internal@protobuf@google@@YAXP6AXXZ@Z (void __cdecl google::protobuf::internal::OnShutdown(void (__cdecl*)(void))) imported in function "void __cdecl Serializable::protobuf_AddDesc_OptionTick_2eproto(void)" (?protobuf_AddDesc_OptionTick_2eproto@Serializable@@YAXXZ)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?OnShutdown@internal@protobuf@google@@YAXP6AXXZ@Z (void __cdecl google::protobuf::internal::OnShutdown(void (__cdecl*)(void))) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?OnShutdown@internal@protobuf@google@@YAXP6AXXZ@Z (void __cdecl google::protobuf::internal::OnShutdown(void (__cdecl*)(void))) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?InternalRegisterGeneratedFile@MessageFactory@protobuf@google@@SAXPBDP6AXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@Z (public: static void __cdecl google::protobuf::MessageFactory::InternalRegisterGeneratedFile(char const *,void (__cdecl*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))) imported in function "void __cdecl Serializable::protobuf_AddDesc_OptionTick_2eproto(void)" (?protobuf_AddDesc_OptionTick_2eproto@Serializable@@YAXXZ)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?InternalRegisterGeneratedFile@MessageFactory@protobuf@google@@SAXPBDP6AXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@Z (public: static void __cdecl google::protobuf::MessageFactory::InternalRegisterGeneratedFile(char const *,void (__cdecl*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?InternalRegisterGeneratedFile@MessageFactory@protobuf@google@@SAXPBDP6AXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@Z (public: static void __cdecl google::protobuf::MessageFactory::InternalRegisterGeneratedFile(char const *,void (__cdecl*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?InternalAddGeneratedFile@DescriptorPool@protobuf@google@@SAXPBXH@Z (public: static void __cdecl google::protobuf::DescriptorPool::InternalAddGeneratedFile(void const *,int)) imported in function "void __cdecl Serializable::protobuf_AddDesc_OptionTick_2eproto(void)" (?protobuf_AddDesc_OptionTick_2eproto@Serializable@@YAXXZ)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?InternalAddGeneratedFile@DescriptorPool@protobuf@google@@SAXPBXH@Z (public: static void __cdecl google::protobuf::DescriptorPool::InternalAddGeneratedFile(void const *,int)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?InternalAddGeneratedFile@DescriptorPool@protobuf@google@@SAXPBXH@Z (public: static void __cdecl google::protobuf::DescriptorPool::InternalAddGeneratedFile(void const *,int)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?VerifyVersion@internal@protobuf@google@@YAXHHPBD@Z (void __cdecl google::protobuf::internal::VerifyVersion(int,int,char const *)) imported in function "void __cdecl Serializable::protobuf_AddDesc_OptionTick_2eproto(void)" (?protobuf_AddDesc_OptionTick_2eproto@Serializable@@YAXXZ)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?VerifyVersion@internal@protobuf@google@@YAXHHPBD@Z (void __cdecl google::protobuf::internal::VerifyVersion(int,int,char const *)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?VerifyVersion@internal@protobuf@google@@YAXHHPBD@Z (void __cdecl google::protobuf::internal::VerifyVersion(int,int,char const *)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ??1UnknownFieldSet@protobuf@google@@QAE@XZ (public: __thiscall google::protobuf::UnknownFieldSet::~UnknownFieldSet(void)) imported in function "public: virtual __thiscall Serializable::OptionTick_ser::~OptionTick_ser(void)" (??1OptionTick_ser@Serializable@@UAE@XZ)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ??1UnknownFieldSet@protobuf@google@@QAE@XZ (public: __thiscall google::protobuf::UnknownFieldSet::~UnknownFieldSet(void)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ??1UnknownFieldSet@protobuf@google@@QAE@XZ (public: __thiscall google::protobuf::UnknownFieldSet::~UnknownFieldSet(void)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ??1Message@protobuf@google@@UAE@XZ (public: virtual __thiscall google::protobuf::Message::~Message(void)) imported in function "public: virtual __thiscall Serializable::OptionTick_ser::~OptionTick_ser(void)" (??1OptionTick_ser@Serializable@@UAE@XZ)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ??1Message@protobuf@google@@UAE@XZ (public: virtual __thiscall google::protobuf::Message::~Message(void)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ??1Message@protobuf@google@@UAE@XZ (public: virtual __thiscall google::protobuf::Message::~Message(void)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ??0UnknownFieldSet@protobuf@google@@QAE@XZ (public: __thiscall google::protobuf::UnknownFieldSet::UnknownFieldSet(void)) imported in function "public: __thiscall Serializable::OptionTick_ser::OptionTick_ser(void)" (??0OptionTick_ser@Serializable@@QAE@XZ)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ??0UnknownFieldSet@protobuf@google@@QAE@XZ (public: __thiscall google::protobuf::UnknownFieldSet::UnknownFieldSet(void)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ??0UnknownFieldSet@protobuf@google@@QAE@XZ (public: __thiscall google::protobuf::UnknownFieldSet::UnknownFieldSet(void)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ??0Message@protobuf@google@@QAE@XZ (public: __thiscall google::protobuf::Message::Message(void)) imported in function "public: __thiscall Serializable::OptionTick_ser::OptionTick_ser(void)" (??0OptionTick_ser@Serializable@@QAE@XZ)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ??0Message@protobuf@google@@QAE@XZ (public: __thiscall google::protobuf::Message::Message(void)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ??0Message@protobuf@google@@QAE@XZ (public: __thiscall google::protobuf::Message::Message(void)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?Clear@UnknownFieldSet@protobuf@google@@QAEXXZ (public: void __thiscall google::protobuf::UnknownFieldSet::Clear(void)) imported in function "public: virtual void __thiscall Serializable::OptionTick_ser::Clear(void)" (?Clear@OptionTick_ser@Serializable@@UAEXXZ)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?Clear@UnknownFieldSet@protobuf@google@@QAEXXZ (public: void __thiscall google::protobuf::UnknownFieldSet::Clear(void)) imported
     1>tick.pb.obj : warning LNK4217: locally defined symbol ?Clear@UnknownFieldSet@protobuf@google@@QAEXXZ (public: void __thiscall google::protobuf::UnknownFieldSet::Clear(void)) imported in function "public: virtual void __thiscall Serializable::Tick_ser::Clear(void)" (?Clear@Tick_ser@Serializable@@UAEXXZ)
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?SkipField@WireFormat@internal@protobuf@google@@SA_NPAVCodedInputStream@io@34@IPAVUnknownFieldSet@34@@Z (public: static bool __cdecl google::protobuf::internal::WireFormat::SkipField(class google::protobuf::io::CodedInputStream *,unsigned int,class google::protobuf::UnknownFieldSet *)) imported in function "public: virtual bool __thiscall Serializable::OptionTick_ser::MergePartialFromCodedStream(class google::protobuf::io::CodedInputStream *)" (?MergePartialFromCodedStream@OptionTick_ser@Serializable@@UAE_NPAVCodedInputStream@io@protobuf@google@@@Z)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?SkipField@WireFormat@internal@protobuf@google@@SA_NPAVCodedInputStream@io@34@IPAVUnknownFieldSet@34@@Z (public: static bool __cdecl google::protobuf::internal::WireFormat::SkipField(class google::protobuf::io::CodedInputStream *,unsigned int,class google::protobuf::UnknownFieldSet *)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?SkipField@WireFormat@internal@protobuf@google@@SA_NPAVCodedInputStream@io@34@IPAVUnknownFieldSet@34@@Z (public: static bool __cdecl google::protobuf::internal::WireFormat::SkipField(class google::protobuf::io::CodedInputStream *,unsigned int,class google::protobuf::UnknownFieldSet *)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?ExpectAtEnd@CodedInputStream@io@protobuf@google@@QAE_NXZ (public: bool __thiscall google::protobuf::io::CodedInputStream::ExpectAtEnd(void)) imported in function "public: virtual bool __thiscall Serializable::OptionTick_ser::MergePartialFromCodedStream(class google::protobuf::io::CodedInputStream *)" (?MergePartialFromCodedStream@OptionTick_ser@Serializable@@UAE_NPAVCodedInputStream@io@protobuf@google@@@Z)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?ExpectAtEnd@CodedInputStream@io@protobuf@google@@QAE_NXZ (public: bool __thiscall google::protobuf::io::CodedInputStream::ExpectAtEnd(void)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?ExpectAtEnd@CodedInputStream@io@protobuf@google@@QAE_NXZ (public: bool __thiscall google::protobuf::io::CodedInputStream::ExpectAtEnd(void)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?ExpectTag@CodedInputStream@io@protobuf@google@@QAE_NI@Z (public: bool __thiscall google::protobuf::io::CodedInputStream::ExpectTag(unsigned int)) imported in function "public: virtual bool __thiscall Serializable::OptionTick_ser::MergePartialFromCodedStream(class google::protobuf::io::CodedInputStream *)" (?MergePartialFromCodedStream@OptionTick_ser@Serializable@@UAE_NPAVCodedInputStream@io@protobuf@google@@@Z)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?ExpectTag@CodedInputStream@io@protobuf@google@@QAE_NI@Z (public: bool __thiscall google::protobuf::io::CodedInputStream::ExpectTag(unsigned int)) imported
     1>tick.pb.obj : warning LNK4217: locally defined symbol ?ExpectTag@CodedInputStream@io@protobuf@google@@QAE_NI@Z (public: bool __thiscall google::protobuf::io::CodedInputStream::ExpectTag(unsigned int)) imported in function "public: virtual bool __thiscall Serializable::Tick_ser::MergePartialFromCodedStream(class google::protobuf::io::CodedInputStream *)" (?MergePartialFromCodedStream@Tick_ser@Serializable@@UAE_NPAVCodedInputStream@io@protobuf@google@@@Z)
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?VerifyUTF8String@WireFormat@internal@protobuf@google@@SAXPBDHW4Operation@1234@@Z (public: static void __cdecl google::protobuf::internal::WireFormat::VerifyUTF8String(char const *,int,enum google::protobuf::internal::WireFormat::Operation)) imported in function "public: virtual bool __thiscall Serializable::OptionTick_ser::MergePartialFromCodedStream(class google::protobuf::io::CodedInputStream *)" (?MergePartialFromCodedStream@OptionTick_ser@Serializable@@UAE_NPAVCodedInputStream@io@protobuf@google@@@Z)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?VerifyUTF8String@WireFormat@internal@protobuf@google@@SAXPBDHW4Operation@1234@@Z (public: static void __cdecl google::protobuf::internal::WireFormat::VerifyUTF8String(char const *,int,enum google::protobuf::internal::WireFormat::Operation)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?VerifyUTF8String@WireFormat@internal@protobuf@google@@SAXPBDHW4Operation@1234@@Z (public: static void __cdecl google::protobuf::internal::WireFormat::VerifyUTF8String(char const *,int,enum google::protobuf::internal::WireFormat::Operation)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?ReadString@WireFormatLite@internal@protobuf@google@@SA_NPAVCodedInputStream@io@34@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z (public: static bool __cdecl google::protobuf::internal::WireFormatLite::ReadString(class google::protobuf::io::CodedInputStream *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > *)) imported in function "public: virtual bool __thiscall Serializable::OptionTick_ser::MergePartialFromCodedStream(class google::protobuf::io::CodedInputStream *)" (?MergePartialFromCodedStream@OptionTick_ser@Serializable@@UAE_NPAVCodedInputStream@io@protobuf@google@@@Z)
     1>StockTick.pb.obj : warning LNK4217: locally defined symbol ?ReadString@WireFormatLite@internal@protobuf@google@@SA_NPAVCodedInputStream@io@34@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z (public: static bool __cdecl google::protobuf::internal::WireFormatLite::ReadString(class google::protobuf::io::CodedInputStream *,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > *)) imported in function "public: virtual void __thiscall Serializable::StockTick_ser::SerializeWithCachedSizes(class google::protobuf::io::CodedOutputStream *)const " (?SerializeWithCachedSizes@StockTick_ser@Serializable@@UBEXPAVCodedOutputStream@io@protobuf@google@@@Z)
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?ReadString@WireFormatLite@internal@protobuf@google@@SA_NPAVCodedInputStream@io@34@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z (public: static bool __cdecl google::protobuf::internal::WireFormatLite::ReadString(class google::protobuf::io::CodedInputStream *,class std::basic_string<char,struct std::char_traits<char>,classstd::allocator<char> > *)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?GetTagWireType@WireFormatLite@internal@protobuf@google@@SA?AW4WireType@1234@I@Z (public: static enum google::protobuf::internal::WireFormatLite::WireType __cdecl google::protobuf::internal::WireFormatLite::GetTagWireType(unsigned int)) imported in function "public: virtual bool __thiscall Serializable::OptionTick_ser::MergePartialFromCodedStream(class google::protobuf::io::CodedInputStream *)" (?MergePartialFromCodedStream@OptionTick_ser@Serializable@@UAE_NPAVCodedInputStream@io@protobuf@google@@@Z)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?GetTagWireType@WireFormatLite@internal@protobuf@google@@SA?AW4WireType@1234@I@Z (public: static enum google::protobuf::internal::WireFormatLite::WireType __cdecl google::protobuf::internal::WireFormatLite::GetTagWireType(unsigned int)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?GetTagWireType@WireFormatLite@internal@protobuf@google@@SA?AW4WireType@1234@I@Z (public: static enum google::protobuf::internal::WireFormatLite::WireType __cdecl google::protobuf::internal::WireFormatLite::GetTagWireType(unsigned int)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?GetTagFieldNumber@WireFormatLite@internal@protobuf@google@@SAHI@Z (public: static int __cdecl google::protobuf::internal::WireFormatLite::GetTagFieldNumber(unsigned int)) imported in function "public: virtual bool __thiscall Serializable::OptionTick_ser::MergePartialFromCodedStream(class google::protobuf::io::CodedInputStream *)" (?MergePartialFromCodedStream@OptionTick_ser@Serializable@@UAE_NPAVCodedInputStream@io@protobuf@google@@@Z)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?GetTagFieldNumber@WireFormatLite@internal@protobuf@google@@SAHI@Z (public: static int __cdecl google::protobuf::internal::WireFormatLite::GetTagFieldNumber(unsigned int)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?GetTagFieldNumber@WireFormatLite@internal@protobuf@google@@SAHI@Z (public: static int __cdecl google::protobuf::internal::WireFormatLite::GetTagFieldNumber(unsigned int)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?ReadTag@CodedInputStream@io@protobuf@google@@QAEIXZ (public: unsigned int __thiscall google::protobuf::io::CodedInputStream::ReadTag(void)) imported in function "public: virtual bool __thiscall Serializable::OptionTick_ser::MergePartialFromCodedStream(class google::protobuf::io::CodedInputStream *)" (?MergePartialFromCodedStream@OptionTick_ser@Serializable@@UAE_NPAVCodedInputStream@io@protobuf@google@@@Z)
     1>StockTick.pb.obj : warning LNK4217: locally defined symbol ?ReadTag@CodedInputStream@io@protobuf@google@@QAEIXZ (public: unsigned int __thiscall google::protobuf::io::CodedInputStream::ReadTag(void)) imported in function "public: virtual void __thiscall Serializable::StockTick_ser::SerializeWithCachedSizes(class google::protobuf::io::CodedOutputStream *)const " (?SerializeWithCachedSizes@StockTick_ser@Serializable@@UBEXPAVCodedOutputStream@io@protobuf@google@@@Z)
     1>tick.pb.obj : warning LNK4217: locally defined symbol ?ReadTag@CodedInputStream@io@protobuf@google@@QAEIXZ (public: unsigned int __thiscall google::protobuf::io::CodedInputStream::ReadTag(void)) imported in function __ehhandler$?mutable_istype@Tick_ser@Serializable@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?ReadVarint32@CodedInputStream@io@protobuf@google@@QAE_NPAI@Z (public: bool __thiscall google::protobuf::io::CodedInputStream::ReadVarint32(unsigned int *)) imported in function "public: static bool __cdecl google::protobuf::internal::WireFormatLite::ReadPrimitive<int,5>(class google::protobuf::io::CodedInputStream *,int *)" (??$ReadPrimitive@H$04@WireFormatLite@internal@protobuf@google@@SA_NPAVCodedInputStream@io@23@PAH@Z)
     1>StockTick.pb.obj : warning LNK4217: locally defined symbol ?ReadVarint32@CodedInputStream@io@protobuf@google@@QAE_NPAI@Z (public: bool __thiscall google::protobuf::io::CodedInputStream::ReadVarint32(unsigned int *)) imported in function "public: virtual void __thiscall Serializable::StockTick_ser::Clear(void)" (?Clear@StockTick_ser@Serializable@@UAEXXZ)
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?ReadVarint32@CodedInputStream@io@protobuf@google@@QAE_NPAI@Z (public: bool __thiscall google::protobuf::io::CodedInputStream::ReadVarint32(unsigned int *)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?DecodeFloat@WireFormatLite@internal@protobuf@google@@SAMI@Z (public: static float __cdecl google::protobuf::internal::WireFormatLite::DecodeFloat(unsigned int)) imported in function "public: static bool __cdecl google::protobuf::internal::WireFormatLite::ReadPrimitive<float,2>(class google::protobuf::io::CodedInputStream *,float *)" (??$ReadPrimitive@M$01@WireFormatLite@internal@protobuf@google@@SA_NPAVCodedInputStream@io@23@PAM@Z)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?DecodeFloat@WireFormatLite@internal@protobuf@google@@SAMI@Z (public: static float __cdecl google::protobuf::internal::WireFormatLite::DecodeFloat(unsigned int)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?DecodeFloat@WireFormatLite@internal@protobuf@google@@SAMI@Z (public: static float __cdecl google::protobuf::internal::WireFormatLite::DecodeFloat(unsigned int)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?ReadLittleEndian32@CodedInputStream@io@protobuf@google@@QAE_NPAI@Z (public: bool __thiscall google::protobuf::io::CodedInputStream::ReadLittleEndian32(unsigned int *)) imported in function "public: static bool __cdecl google::protobuf::internal::WireFormatLite::ReadPrimitive<float,2>(class google::protobuf::io::CodedInputStream *,float *)" (??$ReadPrimitive@M$01@WireFormatLite@internal@protobuf@google@@SA_NPAVCodedInputStream@io@23@PAM@Z)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?ReadLittleEndian32@CodedInputStream@io@protobuf@google@@QAE_NPAI@Z (public: bool __thiscall google::protobuf::io::CodedInputStream::ReadLittleEndian32(unsigned int *)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?ReadLittleEndian32@CodedInputStream@io@protobuf@google@@QAE_NPAI@Z (public: bool __thiscall google::protobuf::io::CodedInputStream::ReadLittleEndian32(unsigned int *)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?SerializeUnknownFields@WireFormat@internal@protobuf@google@@SAXABVUnknownFieldSet@34@PAVCodedOutputStream@io@34@@Z (public: static void __cdecl google::protobuf::internal::WireFormat::SerializeUnknownFields(class google::protobuf::UnknownFieldSet const &,class google::protobuf::io::CodedOutputStream *)) imported in function "public: virtual void __thiscall Serializable::OptionTick_ser::SerializeWithCachedSizes(class google::protobuf::io::CodedOutputStream *)const " (?SerializeWithCachedSizes@OptionTick_ser@Serializable@@UBEXPAVCodedOutputStream@io@protobuf@google@@@Z)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?SerializeUnknownFields@WireFormat@internal@protobuf@google@@SAXABVUnknownFieldSet@34@PAVCodedOutputStream@io@34@@Z (public: static void __cdecl google::protobuf::internal::WireFormat::SerializeUnknownFields(class google::protobuf::UnknownFieldSet const &,class google::protobuf::io::CodedOutputStream *)) imported
     1>tick.pb.obj : warning LNK4217: locally defined symbol ?SerializeUnknownFields@WireFormat@internal@protobuf@google@@SAXABVUnknownFieldSet@34@PAVCodedOutputStream@io@34@@Z (public: static void __cdecl google::protobuf::internal::WireFormat::SerializeUnknownFields(class google::protobuf::UnknownFieldSet const &,class google::protobuf::io::CodedOutputStream *)) imported in function "public: virtual void __thiscall Serializable::Tick_ser::SerializeWithCachedSizes(class google::protobuf::io::CodedOutputStream *)const " (?SerializeWithCachedSizes@Tick_ser@Serializable@@UBEXPAVCodedOutputStream@io@protobuf@google@@@Z)
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?empty@UnknownFieldSet@protobuf@google@@QBE_NXZ (public: bool __thiscall google::protobuf::UnknownFieldSet::empty(void)const ) imported in function "public: virtual void __thiscall Serializable::OptionTick_ser::SerializeWithCachedSizes(class google::protobuf::io::CodedOutputStream *)const " (?SerializeWithCachedSizes@OptionTick_ser@Serializable@@UBEXPAVCodedOutputStream@io@protobuf@google@@@Z)
     1>StockTick.pb.obj : warning LNK4217: locally defined symbol ?empty@UnknownFieldSet@protobuf@google@@QBE_NXZ (public: bool __thiscall google::protobuf::UnknownFieldSet::empty(void)const ) imported in function "public: virtual bool __thiscall Serializable::StockTick_ser::MergePartialFromCodedStream(class google::protobuf::io::CodedInputStream *)" (?MergePartialFromCodedStream@StockTick_ser@Serializable@@UAE_NPAVCodedInputStream@io@protobuf@google@@@Z)
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?empty@UnknownFieldSet@protobuf@google@@QBE_NXZ (public: bool __thiscall google::protobuf::UnknownFieldSet::empty(void)const ) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?WriteInt32@WireFormatLite@internal@protobuf@google@@SAXHHPAVCodedOutputStream@io@34@@Z (public: static void __cdecl google::protobuf::internal::WireFormatLite::WriteInt32(int,int,class google::protobuf::io::CodedOutputStream *)) imported in function "public: virtual void __thiscall Serializable::OptionTick_ser::SerializeWithCachedSizes(class google::protobuf::io::CodedOutputStream *)const " (?SerializeWithCachedSizes@OptionTick_ser@Serializable@@UBEXPAVCodedOutputStream@io@protobuf@google@@@Z)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?WriteInt32@WireFormatLite@internal@protobuf@google@@SAXHHPAVCodedOutputStream@io@34@@Z (public: static void __cdecl google::protobuf::internal::WireFormatLite::WriteInt32(int,int,class google::protobuf::io::CodedOutputStream *)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?WriteInt32@WireFormatLite@internal@protobuf@google@@SAXHHPAVCodedOutputStream@io@34@@Z (public: static void __cdecl google::protobuf::internal::WireFormatLite::WriteInt32(int,int,class google::protobuf::io::CodedOutputStream *)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?WriteFloat@WireFormatLite@internal@protobuf@google@@SAXHMPAVCodedOutputStream@io@34@@Z (public: static void __cdecl google::protobuf::internal::WireFormatLite::WriteFloat(int,float,class google::protobuf::io::CodedOutputStream *)) imported in function "public: virtual void __thiscall Serializable::OptionTick_ser::SerializeWithCachedSizes(class google::protobuf::io::CodedOutputStream *)const " (?SerializeWithCachedSizes@OptionTick_ser@Serializable@@UBEXPAVCodedOutputStream@io@protobuf@google@@@Z)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?WriteFloat@WireFormatLite@internal@protobuf@google@@SAXHMPAVCodedOutputStream@io@34@@Z (public: static void __cdecl google::protobuf::internal::WireFormatLite::WriteFloat(int,float,class google::protobuf::io::CodedOutputStream *)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?WriteFloat@WireFormatLite@internal@protobuf@google@@SAXHMPAVCodedOutputStream@io@34@@Z (public: static void __cdecl google::protobuf::internal::WireFormatLite::WriteFloat(int,float,class google::protobuf::io::CodedOutputStream *)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?WriteBool@WireFormatLite@internal@protobuf@google@@SAXH_NPAVCodedOutputStream@io@34@@Z (public: static void __cdecl google::protobuf::internal::WireFormatLite::WriteBool(int,bool,class google::protobuf::io::CodedOutputStream *)) imported in function "public: virtual void __thiscall Serializable::OptionTick_ser::SerializeWithCachedSizes(class google::protobuf::io::CodedOutputStream *)const " (?SerializeWithCachedSizes@OptionTick_ser@Serializable@@UBEXPAVCodedOutputStream@io@protobuf@google@@@Z)
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?WriteBool@WireFormatLite@internal@protobuf@google@@SAXH_NPAVCodedOutputStream@io@34@@Z (public: static void __cdecl google::protobuf::internal::WireFormatLite::WriteBool(int,bool,class google::protobuf::io::CodedOutputStream *)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?WriteString@WireFormatLite@internal@protobuf@google@@SAXHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCodedOutputStream@io@34@@Z (public: static void __cdecl google::protobuf::internal::WireFormatLite::WriteString(int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class google::protobuf::io::CodedOutputStream *)) imported in function "public: virtual void __thiscall Serializable::OptionTick_ser::SerializeWithCachedSizes(class google::protobuf::io::CodedOutputStream *)const " (?SerializeWithCachedSizes@OptionTick_ser@Serializable@@UBEXPAVCodedOutputStream@io@protobuf@google@@@Z)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?WriteString@WireFormatLite@internal@protobuf@google@@SAXHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCodedOutputStream@io@34@@Z (public: static void __cdecl google::protobuf::internal::WireFormatLite::WriteString(int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class google::protobuf::io::CodedOutputStream *)) imported
     1>tick.pb.obj : warning LNK4217: locally defined symbol ?WriteString@WireFormatLite@internal@protobuf@google@@SAXHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCodedOutputStream@io@34@@Z (public: static void __cdecl google::protobuf::internal::WireFormatLite::WriteString(int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class google::protobuf::io::CodedOutputStream *)) imported in function "public: virtual void __thiscall Serializable::Tick_ser::SerializeWithCachedSizes(class google::protobuf::io::CodedOutputStream *)const " (?SerializeWithCachedSizes@Tick_ser@Serializable@@UBEXPAVCodedOutputStream@io@protobuf@google@@@Z)
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?SerializeUnknownFieldsToArray@WireFormat@internal@protobuf@google@@SAPAEABVUnknownFieldSet@34@PAE@Z (public: static unsigned char * __cdecl google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(class google::protobuf::UnknownFieldSet const &,unsigned char *)) imported in function "public: virtual unsigned char * __thiscall Serializable::OptionTick_ser::SerializeWithCachedSizesToArray(unsigned char *)const " (?SerializeWithCachedSizesToArray@OptionTick_ser@Serializable@@UBEPAEPAE@Z)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?SerializeUnknownFieldsToArray@WireFormat@internal@protobuf@google@@SAPAEABVUnknownFieldSet@34@PAE@Z (public: static unsigned char * __cdecl google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(class google::protobuf::UnknownFieldSet const &,unsigned char *)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?SerializeUnknownFieldsToArray@WireFormat@internal@protobuf@google@@SAPAEABVUnknownFieldSet@34@PAE@Z (public: static unsigned char * __cdecl google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(class google::protobuf::UnknownFieldSet const &,unsigned char *)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?WriteInt32ToArray@WireFormatLite@internal@protobuf@google@@SAPAEHHPAE@Z (public: static unsigned char * __cdecl google::protobuf::internal::WireFormatLite::WriteInt32ToArray(int,int,unsigned char *)) imported in function "public: virtual unsigned char * __thiscall Serializable::OptionTick_ser::SerializeWithCachedSizesToArray(unsigned char *)const " (?SerializeWithCachedSizesToArray@OptionTick_ser@Serializable@@UBEPAEPAE@Z)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?WriteInt32ToArray@WireFormatLite@internal@protobuf@google@@SAPAEHHPAE@Z (public: static unsigned char * __cdecl google::protobuf::internal::WireFormatLite::WriteInt32ToArray(int,int,unsigned char *)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?WriteInt32ToArray@WireFormatLite@internal@protobuf@google@@SAPAEHHPAE@Z (public: static unsigned char * __cdecl google::protobuf::internal::WireFormatLite::WriteInt32ToArray(int,int,unsigned char *)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?WriteFloatToArray@WireFormatLite@internal@protobuf@google@@SAPAEHMPAE@Z (public: static unsigned char * __cdecl google::protobuf::internal::WireFormatLite::WriteFloatToArray(int,float,unsigned char *)) imported in function "public: virtual unsigned char * __thiscall Serializable::OptionTick_ser::SerializeWithCachedSizesToArray(unsigned char *)const " (?SerializeWithCachedSizesToArray@OptionTick_ser@Serializable@@UBEPAEPAE@Z)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?WriteFloatToArray@WireFormatLite@internal@protobuf@google@@SAPAEHMPAE@Z (public: static unsigned char * __cdecl google::protobuf::internal::WireFormatLite::WriteFloatToArray(int,float,unsigned char *)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?WriteFloatToArray@WireFormatLite@internal@protobuf@google@@SAPAEHMPAE@Z (public: static unsigned char * __cdecl google::protobuf::internal::WireFormatLite::WriteFloatToArray(int,float,unsigned char *)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?WriteBoolToArray@WireFormatLite@internal@protobuf@google@@SAPAEH_NPAE@Z (public: static unsigned char * __cdecl google::protobuf::internal::WireFormatLite::WriteBoolToArray(int,bool,unsigned char *)) imported in function "public: virtual unsigned char * __thiscall Serializable::OptionTick_ser::SerializeWithCachedSizesToArray(unsigned char *)const " (?SerializeWithCachedSizesToArray@OptionTick_ser@Serializable@@UBEPAEPAE@Z)
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?WriteBoolToArray@WireFormatLite@internal@protobuf@google@@SAPAEH_NPAE@Z (public: static unsigned char * __cdecl google::protobuf::internal::WireFormatLite::WriteBoolToArray(int,bool,unsigned char *)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?WriteStringToArray@WireFormatLite@internal@protobuf@google@@SAPAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE@Z (public: static unsigned char * __cdecl google::protobuf::internal::WireFormatLite::WriteStringToArray(int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned char *)) imported in function "public: virtual unsigned char * __thiscall Serializable::OptionTick_ser::SerializeWithCachedSizesToArray(unsigned char *)const " (?SerializeWithCachedSizesToArray@OptionTick_ser@Serializable@@UBEPAEPAE@Z)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?WriteStringToArray@WireFormatLite@internal@protobuf@google@@SAPAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE@Z (public: static unsigned char * __cdecl google::protobuf::internal::WireFormatLite::WriteStringToArray(int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned char *)) imported
     1>tick.pb.obj : warning LNK4217: locally defined symbol ?WriteStringToArray@WireFormatLite@internal@protobuf@google@@SAPAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE@Z (public: static unsigned char * __cdecl google::protobuf::internal::WireFormatLite::WriteStringToArray(int,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned char *)) imported in function "public: void __thiscall Serializable::Tick_ser::MergeFrom(class Serializable::Tick_ser const &)" (?MergeFrom@Tick_ser@Serializable@@QAEXABV12@@Z)
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?ComputeUnknownFieldsSize@WireFormat@internal@protobuf@google@@SAHABVUnknownFieldSet@34@@Z (public: static int __cdecl google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(class google::protobuf::UnknownFieldSet const &)) imported in function "public: virtual int __thiscall Serializable::OptionTick_ser::ByteSize(void)const " (?ByteSize@OptionTick_ser@Serializable@@UBEHXZ)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?ComputeUnknownFieldsSize@WireFormat@internal@protobuf@google@@SAHABVUnknownFieldSet@34@@Z (public: static int __cdecl google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(class google::protobuf::UnknownFieldSet const &)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?ComputeUnknownFieldsSize@WireFormat@internal@protobuf@google@@SAHABVUnknownFieldSet@34@@Z (public: static int __cdecl google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(class google::protobuf::UnknownFieldSet const &)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?Int32Size@WireFormatLite@internal@protobuf@google@@SAHH@Z (public: static int __cdecl google::protobuf::internal::WireFormatLite::Int32Size(int)) imported in function "public: virtual int __thiscall Serializable::OptionTick_ser::ByteSize(void)const " (?ByteSize@OptionTick_ser@Serializable@@UBEHXZ)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?Int32Size@WireFormatLite@internal@protobuf@google@@SAHH@Z (public: static int __cdecl google::protobuf::internal::WireFormatLite::Int32Size(int)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?Int32Size@WireFormatLite@internal@protobuf@google@@SAHH@Z (public: static int __cdecl google::protobuf::internal::WireFormatLite::Int32Size(int)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?StringSize@WireFormatLite@internal@protobuf@google@@SAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z (public: static int __cdecl google::protobuf::internal::WireFormatLite::StringSize(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)) imported in function "public: virtual int __thiscall Serializable::OptionTick_ser::ByteSize(void)const " (?ByteSize@OptionTick_ser@Serializable@@UBEHXZ)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?StringSize@WireFormatLite@internal@protobuf@google@@SAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z (public: static int __cdecl google::protobuf::internal::WireFormatLite::StringSize(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?StringSize@WireFormatLite@internal@protobuf@google@@SAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z (public: static int __cdecl google::protobuf::internal::WireFormatLite::StringSize(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?Merge@ReflectionOps@internal@protobuf@google@@SAXABVMessage@34@PAV534@@Z (public: static void __cdecl google::protobuf::internal::ReflectionOps::Merge(class google::protobuf::Message const &,class google::protobuf::Message *)) imported in function "public: virtual void __thiscall Serializable::OptionTick_ser::MergeFrom(class google::protobuf::Message const &)" (?MergeFrom@OptionTick_ser@Serializable@@UAEXABVMessage@protobuf@google@@@Z)
     1>StockTick.pb.obj : warning LNK4217: locally defined symbol ?Merge@ReflectionOps@internal@protobuf@google@@SAXABVMessage@34@PAV534@@Z (public: static void __cdecl google::protobuf::internal::ReflectionOps::Merge(class google::protobuf::Message const &,class google::protobuf::Message *)) imported in function "public: virtual __thiscall std::bad_alloc::~bad_alloc(void)" (??1bad_alloc@std@@UAE@XZ)
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?Merge@ReflectionOps@internal@protobuf@google@@SAXABVMessage@34@PAV534@@Z (public: static void __cdecl google::protobuf::internal::ReflectionOps::Merge(class google::protobuf::Message const &,class google::protobuf::Message *)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?MergeFrom@UnknownFieldSet@protobuf@google@@QAEXABV123@@Z (public: void __thiscall google::protobuf::UnknownFieldSet::MergeFrom(class google::protobuf::UnknownFieldSet const &)) imported in function "public: void __thiscall Serializable::OptionTick_ser::MergeFrom(class Serializable::OptionTick_ser const &)" (?MergeFrom@OptionTick_ser@Serializable@@QAEXABV12@@Z)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?MergeFrom@UnknownFieldSet@protobuf@google@@QAEXABV123@@Z (public: void __thiscall google::protobuf::UnknownFieldSet::MergeFrom(class google::protobuf::UnknownFieldSet const &)) imported
     1>tick.pb.obj : warning LNK4217: locally defined symbol ?MergeFrom@UnknownFieldSet@protobuf@google@@QAEXABV123@@Z (public: void __thiscall google::protobuf::UnknownFieldSet::MergeFrom(class google::protobuf::UnknownFieldSet const &)) imported in function "public: __thiscall Serializable::Tick_collection_ser::Tick_collection_ser(void)" (??0Tick_collection_ser@Serializable@@QAE@XZ)
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?Swap@UnknownFieldSet@protobuf@google@@QAEXPAV123@@Z (public: void __thiscall google::protobuf::UnknownFieldSet::Swap(class google::protobuf::UnknownFieldSet *)) imported in function "public: void __thiscall Serializable::OptionTick_ser::Swap(class Serializable::OptionTick_ser *)" (?Swap@OptionTick_ser@Serializable@@QAEXPAV12@@Z)
     1>StockTick.pb.obj : warning LNK4049: locally defined symbol ?Swap@UnknownFieldSet@protobuf@google@@QAEXPAV123@@Z (public: void __thiscall google::protobuf::UnknownFieldSet::Swap(class google::protobuf::UnknownFieldSet *)) imported
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?Swap@UnknownFieldSet@protobuf@google@@QAEXPAV123@@Z (public: void __thiscall google::protobuf::UnknownFieldSet::Swap(class google::protobuf::UnknownFieldSet *)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?WriteMessageMaybeToArray@WireFormatLite@internal@protobuf@google@@SAXHABVMessageLite@34@PAVCodedOutputStream@io@34@@Z (public: static void __cdecl google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(int,class google::protobuf::MessageLite const &,class google::protobuf::io::CodedOutputStream *)) imported in function "public: virtual void __thiscall Serializable::Option_collection_ser::SerializeWithCachedSizes(class google::protobuf::io::CodedOutputStream *)const " (?SerializeWithCachedSizes@Option_collection_ser@Serializable@@UBEXPAVCodedOutputStream@io@protobuf@google@@@Z)
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?WriteMessageMaybeToArray@WireFormatLite@internal@protobuf@google@@SAXHABVMessageLite@34@PAVCodedOutputStream@io@34@@Z (public: static void __cdecl google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(int,class google::protobuf::MessageLite const &,class google::protobuf::io::CodedOutputStream *)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ??0RepeatedPtrFieldBase@internal@protobuf@google@@IAE@XZ (protected: __thiscall google::protobuf::internal::RepeatedPtrFieldBase::RepeatedPtrFieldBase(void)) imported in function "public: __thiscall google::protobuf::RepeatedPtrField<class Serializable::OptionTick_ser>::RepeatedPtrField<class Serializable::OptionTick_ser>(void)" (??0?$RepeatedPtrField@VOptionTick_ser@Serializable@@@protobuf@google@@QAE@XZ)
     1>tick.pb.obj : warning LNK4217: locally defined symbol ??0RepeatedPtrFieldBase@internal@protobuf@google@@IAE@XZ (protected: __thiscall google::protobuf::internal::RepeatedPtrFieldBase::RepeatedPtrFieldBase(void)) imported in function "protected: class Serializable::Tick_ser const & __thiscall google::protobuf::internal::RepeatedPtrFieldBase::Get<class google::protobuf::RepeatedPtrField<class Serializable::Tick_ser>::TypeHandler>(int)const " (??$Get@VTypeHandler@?$RepeatedPtrField@VTick_ser@Serializable@@@protobuf@google@@@RepeatedPtrFieldBase@internal@protobuf@google@@IBEABVTick_ser@Serializable@@H@Z)
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?size@RepeatedPtrFieldBase@internal@protobuf@google@@IBEHXZ (protected: int __thiscall google::protobuf::internal::RepeatedPtrFieldBase::size(void)const ) imported in function "public: int __thiscall google::protobuf::RepeatedPtrField<class Serializable::OptionTick_ser>::size(void)const " (?size@?$RepeatedPtrField@VOptionTick_ser@Serializable@@@protobuf@google@@QBEHXZ)
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?size@RepeatedPtrFieldBase@internal@protobuf@google@@IBEHXZ (protected: int __thiscall google::protobuf::internal::RepeatedPtrFieldBase::size(void)const ) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?Swap@RepeatedPtrFieldBase@internal@protobuf@google@@IAEXPAV1234@@Z (protected: void __thiscall google::protobuf::internal::RepeatedPtrFieldBase::Swap(class google::protobuf::internal::RepeatedPtrFieldBase *)) imported in function "public: void __thiscall google::protobuf::RepeatedPtrField<class Serializable::OptionTick_ser>::Swap(class google::protobuf::RepeatedPtrField<class Serializable::OptionTick_ser> *)" (?Swap@?$RepeatedPtrField@VOptionTick_ser@Serializable@@@protobuf@google@@QAEXPAV123@@Z)
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?Swap@RepeatedPtrFieldBase@internal@protobuf@google@@IAEXPAV1234@@Z (protected: void __thiscall google::protobuf::internal::RepeatedPtrFieldBase::Swap(class google::protobuf::internal::RepeatedPtrFieldBase *)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?DecrementRecursionDepth@CodedInputStream@io@protobuf@google@@QAEXXZ (public: void __thiscall google::protobuf::io::CodedInputStream::DecrementRecursionDepth(void)) imported in function "public: static bool __cdecl google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual<class Serializable::OptionTick_ser>(class google::protobuf::io::CodedInputStream *,class Serializable::OptionTick_ser *)" (??$ReadMessageNoVirtual@VOptionTick_ser@Serializable@@@WireFormatLite@internal@protobuf@google@@SA_NPAVCodedInputStream@io@23@PAVOptionTick_ser@Serializable@@@Z)
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?DecrementRecursionDepth@CodedInputStream@io@protobuf@google@@QAEXXZ (public: void __thiscall google::protobuf::io::CodedInputStream::DecrementRecursionDepth(void)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?PopLimit@CodedInputStream@io@protobuf@google@@QAEXH@Z (public: void __thiscall google::protobuf::io::CodedInputStream::PopLimit(int)) imported in function "public: static bool __cdecl google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual<class Serializable::OptionTick_ser>(class google::protobuf::io::CodedInputStream *,class Serializable::OptionTick_ser *)" (??$ReadMessageNoVirtual@VOptionTick_ser@Serializable@@@WireFormatLite@internal@protobuf@google@@SA_NPAVCodedInputStream@io@23@PAVOptionTick_ser@Serializable@@@Z)
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?PopLimit@CodedInputStream@io@protobuf@google@@QAEXH@Z (public: void __thiscall google::protobuf::io::CodedInputStream::PopLimit(int)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?ConsumedEntireMessage@CodedInputStream@io@protobuf@google@@QAE_NXZ (public: bool __thiscall google::protobuf::io::CodedInputStream::ConsumedEntireMessage(void)) imported in function "public: static bool __cdecl google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual<class Serializable::OptionTick_ser>(class google::protobuf::io::CodedInputStream *,class Serializable::OptionTick_ser *)" (??$ReadMessageNoVirtual@VOptionTick_ser@Serializable@@@WireFormatLite@internal@protobuf@google@@SA_NPAVCodedInputStream@io@23@PAVOptionTick_ser@Serializable@@@Z)
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?ConsumedEntireMessage@CodedInputStream@io@protobuf@google@@QAE_NXZ (public: bool __thiscall google::protobuf::io::CodedInputStream::ConsumedEntireMessage(void)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?PushLimit@CodedInputStream@io@protobuf@google@@QAEHH@Z (public: int __thiscall google::protobuf::io::CodedInputStream::PushLimit(int)) imported in function "public: static bool __cdecl google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual<class Serializable::OptionTick_ser>(class google::protobuf::io::CodedInputStream *,classSerializable::OptionTick_ser *)" (??$ReadMessageNoVirtual@VOptionTick_ser@Serializable@@@WireFormatLite@internal@protobuf@google@@SA_NPAVCodedInputStream@io@23@PAVOptionTick_ser@Serializable@@@Z)
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?PushLimit@CodedInputStream@io@protobuf@google@@QAEHH@Z (public: int __thiscall google::protobuf::io::CodedInputStream::PushLimit(int)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?IncrementRecursionDepth@CodedInputStream@io@protobuf@google@@QAE_NXZ (public: bool __thiscall google::protobuf::io::CodedInputStream::IncrementRecursionDepth(void)) imported in function "public: static bool __cdecl google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual<class Serializable::OptionTick_ser>(class google::protobuf::io::CodedInputStream *,class Serializable::OptionTick_ser *)" (??$ReadMessageNoVirtual@VOptionTick_ser@Serializable@@@WireFormatLite@internal@protobuf@google@@SA_NPAVCodedInputStream@io@23@PAVOptionTick_ser@Serializable@@@Z)
     1>tick.pb.obj : warning LNK4217: locally defined symbol ?IncrementRecursionDepth@CodedInputStream@io@protobuf@google@@QAE_NXZ (public: bool __thiscall google::protobuf::io::CodedInputStream::IncrementRecursionDepth(void)) imported in function "protected: void __thiscall google::protobuf::internal::RepeatedPtrFieldBase::Clear<class google::protobuf::RepeatedPtrField<class Serializable::Tick_ser>::TypeHandler>(void)" (??$Clear@VTypeHandler@?$RepeatedPtrField@VTick_ser@Serializable@@@protobuf@google@@@RepeatedPtrFieldBase@internal@protobuf@google@@IAEXXZ)
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?WriteVarint32ToArray@CodedOutputStream@io@protobuf@google@@SAPAEIPAE@Z (public: static unsigned char * __cdecl google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(unsigned int,unsigned char *)) imported in function "public: static unsigned char * __cdecl google::protobuf::internal::WireFormatLite::WriteMessageNoVirtualToArray<class Serializable::OptionTick_ser>(int,class Serializable::OptionTick_ser const &,unsigned char *)" (??$WriteMessageNoVirtualToArray@VOptionTick_ser@Serializable@@@WireFormatLite@internal@protobuf@google@@SAPAEHABVOptionTick_ser@Serializable@@PAE@Z)
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?WriteVarint32ToArray@CodedOutputStream@io@protobuf@google@@SAPAEIPAE@Z (public: static unsigned char * __cdecl google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(unsigned int,unsigned char *)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?WriteTagToArray@WireFormatLite@internal@protobuf@google@@SAPAEHW4WireType@1234@PAE@Z (public: static unsigned char * __cdecl google::protobuf::internal::WireFormatLite::WriteTagToArray(int,enum google::protobuf::internal::WireFormatLite::WireType,unsigned char *)) imported in function "public: static unsigned char * __cdecl google::protobuf::internal::WireFormatLite::WriteMessageNoVirtualToArray<class Serializable::OptionTick_ser>(int,class Serializable::OptionTick_ser const &,unsigned char *)" (??$WriteMessageNoVirtualToArray@VOptionTick_ser@Serializable@@@WireFormatLite@internal@protobuf@google@@SAPAEHABVOptionTick_ser@Serializable@@PAE@Z)
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?WriteTagToArray@WireFormatLite@internal@protobuf@google@@SAPAEHW4WireType@1234@PAE@Z (public: static unsigned char * __cdecl google::protobuf::internal::WireFormatLite::WriteTagToArray(int,enum google::protobuf::internal::WireFormatLite::WireType,unsigned char *)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?LengthDelimitedSize@WireFormatLite@internal@protobuf@google@@SAHH@Z (public: static int __cdecl google::protobuf::internal::WireFormatLite::LengthDelimitedSize(int)) imported in function "public: static int __cdecl google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual<class Serializable::OptionTick_ser>(class Serializable::OptionTick_ser const &)" (??$MessageSizeNoVirtual@VOptionTick_ser@Serializable@@@WireFormatLite@internal@protobuf@google@@SAHABVOptionTick_ser@Serializable@@@Z)
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?LengthDelimitedSize@WireFormatLite@internal@protobuf@google@@SAHH@Z (public: static int __cdecl google::protobuf::internal::WireFormatLite::LengthDelimitedSize(int)) imported
     1>OptionTick.pb.obj : warning LNK4217: locally defined symbol ?Reserve@RepeatedPtrFieldBase@internal@protobuf@google@@IAEXH@Z (protected: void __thiscall google::protobuf::internal::RepeatedPtrFieldBase::Reserve(int)) imported in function "protected: class Serializable::OptionTick_ser * __thiscall google::protobuf::internal::RepeatedPtrFieldBase::Add<class google::protobuf::RepeatedPtrField<class Serializable::OptionTick_ser>::TypeHandler>(void)" (??$Add@VTypeHandler@?$RepeatedPtrField@VOptionTick_ser@Serializable@@@protobuf@google@@@RepeatedPtrFieldBase@internal@protobuf@google@@IAEPAVOptionTick_ser@Serializable@@XZ)
     1>tick.pb.obj : warning LNK4049: locally defined symbol ?Reserve@RepeatedPtrFieldBase@internal@protobuf@google@@IAEXH@Z (protected: void __thiscall google::protobuf::internal::RepeatedPtrFieldBase::Reserve(int)) imported
     1>TickStorage.obj : warning LNK4049: locally defined symbol ?Reserve@RepeatedPtrFieldBase@internal@protobuf@google@@IAEXH@Z (protected: void __thiscall google::protobuf::internal::RepeatedPtrFieldBase::Reserve(int)) imported
     1>ta_libc_cdd.lib(ta_global.obj) : warning LNK4099: PDB 'vc100.pdb' was not found with 'ta_libc_cdd.lib(ta_global.obj)' or at 'C:\rsquared\Framework\Win32\Debug\vc100.pdb'; linking object as if no debug info
     1>QuantLib-vc100-mt-gd.lib(errors.obj) : warning LNK4099: PDB 'vc100.pdb' was not found with 'QuantLib-vc100-mt-gd.lib(errors.obj)' or at 'C:\rsquared\Framework\Win32\Debug\vc100.pdb'; linking object as if no debug info
         WOPR.vcxproj -> C:\rsquared\Framework\Win32\Debug\WOPR.exe
       Manifest:
         C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\bin\mt.exe /nologo /verbose /outputresource:"C:\rsquared\Framework\Win32\Debug\\WOPR.exe;#1" /manifest Debug\WOPR.exe.intermediate.manifest
       FinalizeBuildStatus:
         Deleting file "Debug\WOPR.unsuccessfulbuild".
         Touching "Debug\WOPR.lastbuildstate".
     1>Done Building Project "C:\rsquared\Framework\WOPR\WOPR.vcxproj" (build target(s)).

Build succeeded.

Time Elapsed 00:03:32.80
